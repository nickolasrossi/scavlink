// Code generated by sbt-mavgen. Manual edits will be overwritten
package scavlink.message.autoquad

import scavlink.message._
import scavlink.message.enums.MavCmd

import scavlink.message.common.CommandLong
import scavlink.coord.Coordinates
import scavlink.coord.Geo

/**
 * Start/stop AutoQuad telemetry values stream.
 * @param startOrStop Start or stop (1 or 0)
 * @param streamFrequency Stream frequency in us
 */
case class AqTelemetry(targetSystem: SystemId = 0, targetComponent: ComponentId = 0, startOrStop: Float = 0, streamFrequency: Float = 0)
extends Command {
  val cmd = MavCmd(2)
  val message = CommandLong(targetSystem, targetComponent, cmd, param1 = startOrStop, param2 = streamFrequency)
  override def toString = cmd.toString + " startOrStop=" + startOrStop + " streamFrequency=" + streamFrequency 
}

/**
 * Command AutoQuad to go to a particular place at a set speed.
 * @param location Latitude / Lontitude / Altitude
 * @param speed Speed
 */
case class AqFollow(targetSystem: SystemId = 0, targetComponent: ComponentId = 0, location: Coordinates = Geo(), speed: Float = 0)
extends Command with Location[AqFollow] {
  val cmd = MavCmd(3)
  val message = CommandLong(targetSystem, targetComponent, cmd, param1 = location.x.toFloat, param2 = location.y.toFloat, param3 = location.z.toFloat, param4 = speed)
  def setLocation(location: Coordinates) = copy(location = location)
  override def toString = cmd.toString + " location=" + location + " speed=" + speed 
}

object AqFollow {
  def apply(loc: Coordinates): AqFollow = AqFollow(location = loc)
}

/**
 * Request AutoQuad firmware version number.
 */
case class AqRequestVersion(targetSystem: SystemId = 0, targetComponent: ComponentId = 0)
extends Command {
  val cmd = MavCmd(4)
  val message = CommandLong(targetSystem, targetComponent, cmd)
  override def toString = cmd.toString 
}
