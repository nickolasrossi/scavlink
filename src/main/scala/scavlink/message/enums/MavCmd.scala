// Code generated by sbt-mavgen. Manual edits will be overwritten
package scavlink.message.enums

/**
 * Commands to be executed by the MAV. They can be executed on user request, or as part of a mission script. If the action is used in a mission, the parameter mapping to the waypoint/mission message is as follows: Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command list is similar what ARINC 424 is for commercial aircraft: A data format how to interpret waypoint/mission data.
 */
object MavCmd extends Enumeration {
  val ACK_SET_MODE = Value(11)
  /**
   * Navigate to MISSION.
   */
  val NAV_WAYPOINT = Value(16)
  /**
   * Loiter around this MISSION an unlimited amount of time
   */
  val NAV_LOITER_UNLIM = Value(17)
  /**
   * Loiter around this MISSION for X turns
   */
  val NAV_LOITER_TURNS = Value(18)
  /**
   * Loiter around this MISSION for X seconds
   */
  val NAV_LOITER_TIME = Value(19)
  /**
   * Return to launch location
   */
  val NAV_RETURN_TO_LAUNCH = Value(20)
  /**
   * Land at location
   */
  val NAV_LAND = Value(21)
  /**
   * Takeoff from ground / hand
   */
  val NAV_TAKEOFF = Value(22)
  /**
   * Continue on the current course and climb/descend to specified altitude.  When the altitude is reached continue to the next command (i.e., don't proceed to the next command until the desired altitude is reached.
   */
  val NAV_CONTINUE_AND_CHANGE_ALT = Value(30)
  /**
   * Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicles control system to control the vehicle attitude and the attitude of various sensors such as cameras.
   */
  val NAV_ROI = Value(80)
  /**
   * Control autonomous path planning on the MAV.
   */
  val NAV_PATHPLANNING = Value(81)
  /**
   * Navigate to MISSION using a spline path.
   */
  val NAV_SPLINE_WAYPOINT = Value(82)
  /**
   * hand control over to an external controller
   */
  val NAV_GUIDED_ENABLE = Value(92)
  /**
   * NOP - This command is only used to mark the upper limit of the NAV/ACTION commands in the enumeration
   */
  val NAV_LAST = Value(95)
  /**
   * Delay mission state machine.
   */
  val CONDITION_DELAY = Value(112)
  /**
   * Ascend/descend at rate.  Delay mission state machine until desired altitude reached.
   */
  val CONDITION_CHANGE_ALT = Value(113)
  /**
   * Delay mission state machine until within desired distance of next NAV point.
   */
  val CONDITION_DISTANCE = Value(114)
  /**
   * Reach a certain target angle.
   */
  val CONDITION_YAW = Value(115)
  /**
   * NOP - This command is only used to mark the upper limit of the CONDITION commands in the enumeration
   */
  val CONDITION_LAST = Value(159)
  /**
   * Set system mode.
   */
  val DO_SET_MODE = Value(176)
  /**
   * Jump to the desired command in the mission list.  Repeat this action only the specified number of times
   */
  val DO_JUMP = Value(177)
  /**
   * Change speed and/or throttle set points.
   */
  val DO_CHANGE_SPEED = Value(178)
  /**
   * Changes the home location either to the current location or a specified location.
   */
  val DO_SET_HOME = Value(179)
  /**
   * Set a system parameter.  Caution!  Use of this command requires knowledge of the numeric enumeration value of the parameter.
   */
  val DO_SET_PARAMETER = Value(180)
  /**
   * Set a relay to a condition.
   */
  val DO_SET_RELAY = Value(181)
  /**
   * Cycle a relay on and off for a desired number of cyles with a desired period.
   */
  val DO_REPEAT_RELAY = Value(182)
  /**
   * Set a servo to a desired PWM value.
   */
  val DO_SET_SERVO = Value(183)
  /**
   * Cycle a between its nominal setting and a desired PWM for a desired number of cycles with a desired period.
   */
  val DO_REPEAT_SERVO = Value(184)
  /**
   * Terminate flight immediately
   */
  val DO_FLIGHTTERMINATION = Value(185)
  /**
   * Mission command to perform a landing. This is used as a marker in a mission to tell the autopilot where a sequence of mission items that represents a landing starts. It may also be sent via a COMMAND_LONG to trigger a landing, in which case the nearest (geographically) landing sequence in the mission will be used. The Latitude/Longitude is optional, and may be set to 0/0 if not needed. If specified then it will be used to help find the closest landing sequence.
   */
  val DO_LAND_START = Value(189)
  /**
   * Mission command to perform a landing from a rally point.
   */
  val DO_RALLY_LAND = Value(190)
  /**
   * Mission command to safely abort an autonmous landing.
   */
  val DO_GO_AROUND = Value(191)
  /**
   * Control onboard camera system.
   */
  val DO_CONTROL_VIDEO = Value(200)
  /**
   * Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicles control system to control the vehicle attitude and the attitude of various sensors such as cameras.
   */
  val DO_SET_ROI = Value(201)
  /**
   * Mission command to configure an on-board camera controller system.
   */
  val DO_DIGICAM_CONFIGURE = Value(202)
  /**
   * Mission command to control an on-board camera controller system.
   */
  val DO_DIGICAM_CONTROL = Value(203)
  /**
   * Mission command to configure a camera or antenna mount
   */
  val DO_MOUNT_CONFIGURE = Value(204)
  /**
   * Mission command to control a camera or antenna mount
   */
  val DO_MOUNT_CONTROL = Value(205)
  /**
   * Mission command to set CAM_TRIGG_DIST for this flight
   */
  val DO_SET_CAM_TRIGG_DIST = Value(206)
  /**
   * Mission command to enable the geofence
   */
  val DO_FENCE_ENABLE = Value(207)
  /**
   * Mission command to trigger a parachute
   */
  val DO_PARACHUTE = Value(208)
  /**
   * Change to/from inverted flight
   */
  val DO_INVERTED_FLIGHT = Value(210)
  /**
   * Mission command to control a camera or antenna mount, using a quaternion as reference.
   */
  val DO_MOUNT_CONTROL_QUAT = Value(220)
  /**
   * set id of master controller
   */
  val DO_GUIDED_MASTER = Value(221)
  /**
   * set limits for external control
   */
  val DO_GUIDED_LIMITS = Value(222)
  /**
   * NOP - This command is only used to mark the upper limit of the DO commands in the enumeration
   */
  val DO_LAST = Value(240)
  /**
   * Trigger calibration. This command will be only accepted if in pre-flight mode.
   */
  val PREFLIGHT_CALIBRATION = Value(241)
  /**
   * Set sensor offsets. This command will be only accepted if in pre-flight mode.
   */
  val PREFLIGHT_SET_SENSOR_OFFSETS = Value(242)
  /**
   * Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode.
   */
  val PREFLIGHT_STORAGE = Value(245)
  /**
   * Request the reboot or shutdown of system components.
   */
  val PREFLIGHT_REBOOT_SHUTDOWN = Value(246)
  /**
   * Hold / continue the current action
   */
  val OVERRIDE_GOTO = Value(252)
  /**
   * start running a mission
   */
  val MISSION_START = Value(300)
  /**
   * Arms / Disarms a component
   */
  val COMPONENT_ARM_DISARM = Value(400)
  /**
   * Starts receiver pairing
   */
  val START_RX_PAIR = Value(500)
  /**
   * Start image capture sequence
   */
  val IMAGE_START_CAPTURE = Value(2000)
  /**
   * Stop image capture sequence
   */
  val IMAGE_STOP_CAPTURE = Value(2001)
  /**
   * Starts video capture
   */
  val VIDEO_START_CAPTURE = Value(2500)
  /**
   * Stop the current video capture
   */
  val VIDEO_STOP_CAPTURE = Value(2501)
  /**
   * Create a panorama at the current position
   */
  val PANORAMA_CREATE = Value(2800)
  /**
   * Deploy payload on a Lat / Lon / Alt position. This includes the navigation to reach the required release position and velocity.
   */
  val PAYLOAD_PREPARE_DEPLOY = Value(30001)
  /**
   * Control the payload deployment.
   */
  val PAYLOAD_CONTROL_DEPLOY = Value(30002)
  /**
   * Mission command to perform motor test
   */
  val ARDUPILOTMEGA_DO_MOTOR_TEST = Value(209)
  /**
   * Mission command to operate EPM gripper
   */
  val ARDUPILOTMEGA_DO_GRIPPER = Value(211)
  /**
   * Start/stop AutoQuad telemetry values stream.
   */
  val AUTOQUAD_AQ_TELEMETRY = Value(2)
  /**
   * Command AutoQuad to go to a particular place at a set speed.
   */
  val AUTOQUAD_AQ_FOLLOW = Value(3)
  /**
   * Request AutoQuad firmware version number.
   */
  val AUTOQUAD_AQ_REQUEST_VERSION = Value(4)
  /**
   * Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode.
   */
  val MATRIXPILOT_PREFLIGHT_STORAGE_ADVANCED = Value(0)
  /**
   * Starts a search
   */
  val PIXHAWK_DO_START_SEARCH = Value(10001)
  /**
   * Starts a search
   */
  val PIXHAWK_DO_FINISH_SEARCH = Value(10002)
  /**
   * Starts a search
   */
  val PIXHAWK_NAV_SWEEP = Value(10003)
  /**
   * Return vehicle to base.
   */
  val SLUGS_RETURN_TO_BASE = Value(10011)
  /**
   * Stops the vehicle from returning to base and resumes flight.
   */
  val SLUGS_STOP_RETURN_TO_BASE = Value(10012)
  /**
   * Turns the vehicle's visible or infrared lights on or off.
   */
  val SLUGS_TURN_LIGHT = Value(10013)
  /**
   * Requests vehicle to send current mid-level commands to ground station.
   */
  val SLUGS_GET_MID_LEVEL_COMMANDS = Value(10014)
  /**
   * Requests storage of mid-level commands.
   */
  val SLUGS_MIDLEVEL_STORAGE = Value(10015)
}
