// Code generated by sbt-mavgen. Manual edits will be overwritten
package scavlink.message.slugs

import scavlink.message._
import scavlink.message.enums.MavCmd

import scavlink.message.common.CommandLong
import scavlink.coord.Coordinates
import scavlink.coord.Geo

/**
 * Does nothing.
 * @param param1 1 to arm, 0 to disarm
 */
case class DoNothing(targetSystem: SystemId = 0, targetComponent: ComponentId = 0, param1: Float = 0)
extends Command {
  val cmd = MavCmd(10001)
  val message = CommandLong(targetSystem, targetComponent, cmd, param1 = param1)
  override def toString = cmd.toString + " param1=" + param1 
}

/**
 * Return vehicle to base.
 * @param param1 0: return to base, 1: track mobile base
 */
case class ReturnToBase(targetSystem: SystemId = 0, targetComponent: ComponentId = 0, param1: Float = 0)
extends Command {
  val cmd = MavCmd(10011)
  val message = CommandLong(targetSystem, targetComponent, cmd, param1 = param1)
  override def toString = cmd.toString + " param1=" + param1 
}

/**
 * Stops the vehicle from returning to base and resumes flight.
 */
case class StopReturnToBase(targetSystem: SystemId = 0, targetComponent: ComponentId = 0)
extends Command {
  val cmd = MavCmd(10012)
  val message = CommandLong(targetSystem, targetComponent, cmd)
  override def toString = cmd.toString 
}

/**
 * Turns the vehicle's visible or infrared lights on or off.
 * @param param1 0: visible lights, 1: infrared lights
 * @param param2 0: turn on, 1: turn off
 */
case class TurnLight(targetSystem: SystemId = 0, targetComponent: ComponentId = 0, param1: Float = 0, param2: Float = 0)
extends Command {
  val cmd = MavCmd(10013)
  val message = CommandLong(targetSystem, targetComponent, cmd, param1 = param1, param2 = param2)
  override def toString = cmd.toString + " param1=" + param1 + " param2=" + param2 
}

/**
 * Requests vehicle to send current mid-level commands to ground station.
 */
case class GetMidLevelCommands(targetSystem: SystemId = 0, targetComponent: ComponentId = 0)
extends Command {
  val cmd = MavCmd(10014)
  val message = CommandLong(targetSystem, targetComponent, cmd)
  override def toString = cmd.toString 
}

/**
 * Requests storage of mid-level commands.
 * @param midLevelCommandStorage Mid-level command storage: 0: read from flash/EEPROM, 1: write to flash/EEPROM
 */
case class MidlevelStorage(targetSystem: SystemId = 0, targetComponent: ComponentId = 0, midLevelCommandStorage: Float = 0)
extends Command {
  val cmd = MavCmd(10015)
  val message = CommandLong(targetSystem, targetComponent, cmd, param1 = midLevelCommandStorage)
  override def toString = cmd.toString + " midLevelCommandStorage=" + midLevelCommandStorage 
}
