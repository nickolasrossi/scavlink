// Code generated by sbt-mavgen. Manual edits will be overwritten
package scavlink.message.ASLUAV

import scavlink.message._
import scavlink.message.enums._

/**
 * Voltage and current sensor data
 * @param adc121VspbVolt Power board voltage sensor reading in volts
 * @param adc121CspbAmp Power board current sensor reading in amps
 * @param adc121Cs1Amp Board current sensor 1 reading in amps
 * @param adc121Cs2Amp Board current sensor 2 reading in amps
 */
case class SensPower(adc121VspbVolt: Float = 0, adc121CspbAmp: Float = 0, adc121Cs1Amp: Float = 0, adc121Cs2Amp: Float = 0)
extends Message {
  val _id = 201
  val _name = "SENS_POWER"
  val _bundle = Bundle.ASLUAV
  override def toString = "SENS_POWER" + " adc121VspbVolt=" + adc121VspbVolt + " adc121CspbAmp=" + adc121CspbAmp + " adc121Cs1Amp=" + adc121Cs1Amp + " adc121Cs2Amp=" + adc121Cs2Amp
}

/**
 * Maximum Power Point Tracker (MPPT) sensor data for solar module power performance tracking
 * @param mpptTimestamp MPPT last timestamp
 * @param mppt1Volt MPPT1 voltage
 * @param mppt1Amp MPPT1 current
 * @param mppt1Pwm MPPT1 pwm
 * @param mppt1Status MPPT1 status
 * @param mppt2Volt MPPT2 voltage
 * @param mppt2Amp MPPT2 current
 * @param mppt2Pwm MPPT2 pwm
 * @param mppt2Status MPPT2 status
 * @param mppt3Volt MPPT3 voltage
 * @param mppt3Amp MPPT3 current
 * @param mppt3Pwm MPPT3 pwm
 * @param mppt3Status MPPT3 status
 */
case class SensMppt(mpptTimestamp: Long = 0, mppt1Volt: Float = 0, mppt1Amp: Float = 0, mppt1Pwm: Short = 0, mppt1Status: Byte = 0, mppt2Volt: Float = 0, mppt2Amp: Float = 0, mppt2Pwm: Short = 0, mppt2Status: Byte = 0, mppt3Volt: Float = 0, mppt3Amp: Float = 0, mppt3Pwm: Short = 0, mppt3Status: Byte = 0)
extends Message {
  val _id = 202
  val _name = "SENS_MPPT"
  val _bundle = Bundle.ASLUAV
  override def toString = "SENS_MPPT" + " mpptTimestamp=" + mpptTimestamp + " mppt1Volt=" + mppt1Volt + " mppt1Amp=" + mppt1Amp + " mppt1Pwm=" + mppt1Pwm + " mppt1Status=" + mppt1Status + " mppt2Volt=" + mppt2Volt + " mppt2Amp=" + mppt2Amp + " mppt2Pwm=" + mppt2Pwm + " mppt2Status=" + mppt2Status + " mppt3Volt=" + mppt3Volt + " mppt3Amp=" + mppt3Amp + " mppt3Pwm=" + mppt3Pwm + " mppt3Status=" + mppt3Status
}

/**
 * ASL-fixed-wing controller data
 * @param timestamp Timestamp
 * @param aslctrlMode ASLCTRL control-mode (manual, stabilized, auto, etc...)
 * @param h See sourcecode for a description of these values...
 * @param hRef 
 * @param hRefT 
 * @param pitchangle Pitch angle [deg]
 * @param pitchangleref Pitch angle reference[deg]
 * @param q 
 * @param qRef 
 * @param uElev 
 * @param uThrot 
 * @param uThrot2 
 * @param aZ 
 * @param airspeedref Airspeed reference [m/s]
 * @param spoilersengaged 
 * @param yawangle Yaw angle [deg]
 * @param yawangleref Yaw angle reference[deg]
 * @param rollangle Roll angle [deg]
 * @param rollangleref Roll angle reference[deg]
 * @param p 
 * @param pRef 
 * @param r 
 * @param rRef 
 * @param uAil 
 * @param uRud 
 */
case class AslctrlData(timestamp: Long = 0, aslctrlMode: Byte = 0, h: Float = 0, hRef: Float = 0, hRefT: Float = 0, pitchangle: Float = 0, pitchangleref: Float = 0, q: Float = 0, qRef: Float = 0, uElev: Float = 0, uThrot: Float = 0, uThrot2: Float = 0, aZ: Float = 0, airspeedref: Float = 0, spoilersengaged: Byte = 0, yawangle: Float = 0, yawangleref: Float = 0, rollangle: Float = 0, rollangleref: Float = 0, p: Float = 0, pRef: Float = 0, r: Float = 0, rRef: Float = 0, uAil: Float = 0, uRud: Float = 0)
extends Message {
  val _id = 203
  val _name = "ASLCTRL_DATA"
  val _bundle = Bundle.ASLUAV
  override def toString = "ASLCTRL_DATA" + " timestamp=" + timestamp + " aslctrlMode=" + aslctrlMode + " h=" + h + " hRef=" + hRef + " hRefT=" + hRefT + " pitchangle=" + pitchangle + " pitchangleref=" + pitchangleref + " q=" + q + " qRef=" + qRef + " uElev=" + uElev + " uThrot=" + uThrot + " uThrot2=" + uThrot2 + " aZ=" + aZ + " airspeedref=" + airspeedref + " spoilersengaged=" + spoilersengaged + " yawangle=" + yawangle + " yawangleref=" + yawangleref + " rollangle=" + rollangle + " rollangleref=" + rollangleref + " p=" + p + " pRef=" + pRef + " r=" + r + " rRef=" + rRef + " uAil=" + uAil + " uRud=" + uRud
}

/**
 * ASL-fixed-wing controller debug data
 * @param i321 Debug data
 * @param i81 Debug data
 * @param i82 Debug data
 * @param f1 Debug data
 * @param f2 Debug data
 * @param f3 Debug data
 * @param f4 Debug data
 * @param f5 Debug data
 * @param f6 Debug data
 * @param f7 Debug data
 * @param f8 Debug data
 */
case class AslctrlDebug(i321: Int = 0, i81: Byte = 0, i82: Byte = 0, f1: Float = 0, f2: Float = 0, f3: Float = 0, f4: Float = 0, f5: Float = 0, f6: Float = 0, f7: Float = 0, f8: Float = 0)
extends Message {
  val _id = 204
  val _name = "ASLCTRL_DEBUG"
  val _bundle = Bundle.ASLUAV
  override def toString = "ASLCTRL_DEBUG" + " i321=" + i321 + " i81=" + i81 + " i82=" + i82 + " f1=" + f1 + " f2=" + f2 + " f3=" + f3 + " f4=" + f4 + " f5=" + f5 + " f6=" + f6 + " f7=" + f7 + " f8=" + f8
}

/**
 * Extended state information for ASLUAVs
 * @param ledStatus Status of the position-indicator LEDs
 * @param satcomStatus Status of the IRIDIUM satellite communication system
 * @param servoStatus Status vector for up to 8 servos
 * @param motorRpm Motor RPM
 */
case class AsluavStatus(ledStatus: Byte = 0, satcomStatus: Byte = 0, servoStatus: Vector[Byte] = Vector.fill(8)(0), motorRpm: Float = 0)
extends Message {
  require(servoStatus.length <= 8)
  val _id = 205
  val _name = "ASLUAV_STATUS"
  val _bundle = Bundle.ASLUAV
  override def toString = "ASLUAV_STATUS" + " ledStatus=" + ledStatus + " satcomStatus=" + satcomStatus + " servoStatus=" + servoStatus + " motorRpm=" + motorRpm
}
