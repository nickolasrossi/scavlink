// Code generated by sbt-mavgen. Manual edits will be overwritten
package scavlink.message.ualberta

import scavlink.message._
import scavlink.message.enums._

/**
 * Accelerometer and Gyro biases from the navigation filter
 * @param usec Timestamp (microseconds)
 * @param accel0 b_f[0]
 * @param accel1 b_f[1]
 * @param accel2 b_f[2]
 * @param gyro0 b_f[0]
 * @param gyro1 b_f[1]
 * @param gyro2 b_f[2]
 */
case class NavFilterBias(usec: Long = 0, accel0: Float = 0, accel1: Float = 0, accel2: Float = 0, gyro0: Float = 0, gyro1: Float = 0, gyro2: Float = 0)
extends Message {
  val _id = 220
  val _name = "NAV_FILTER_BIAS"
  val _bundle = Bundle.ualberta
  override def toString = "NAV_FILTER_BIAS" + " usec=" + usec + " accel0=" + accel0 + " accel1=" + accel1 + " accel2=" + accel2 + " gyro0=" + gyro0 + " gyro1=" + gyro1 + " gyro2=" + gyro2
}

/**
 * Complete set of calibration parameters for the radio
 * @param aileron Aileron setpoints: left, center, right
 * @param elevator Elevator setpoints: nose down, center, nose up
 * @param rudder Rudder setpoints: nose left, center, nose right
 * @param gyro Tail gyro mode/gain setpoints: heading hold, rate mode
 * @param pitch Pitch curve setpoints (every 25%)
 * @param throttle Throttle curve setpoints (every 25%)
 */
case class RadioCalibration(aileron: (Short,Short,Short) = (0,0,0), elevator: (Short,Short,Short) = (0,0,0), rudder: (Short,Short,Short) = (0,0,0), gyro: (Short,Short) = (0,0), pitch: Vector[Short] = Vector.fill(5)(0), throttle: Vector[Short] = Vector.fill(5)(0))
extends Message {
  require(pitch.length <= 5)
  require(throttle.length <= 5)
  val _id = 221
  val _name = "RADIO_CALIBRATION"
  val _bundle = Bundle.ualberta
  override def toString = "RADIO_CALIBRATION" + " aileron=" + aileron + " elevator=" + elevator + " rudder=" + rudder + " gyro=" + gyro + " pitch=" + pitch + " throttle=" + throttle
}

/**
 * System status specific to ualberta uav
 * @param mode System mode, see UALBERTA_AUTOPILOT_MODE ENUM
 * @param navMode Navigation mode, see UALBERTA_NAV_MODE ENUM
 * @param pilot Pilot mode, see UALBERTA_PILOT_MODE
 */
case class UalbertaSysStatus(mode: Byte = 0, navMode: Byte = 0, pilot: Byte = 0)
extends Message {
  val _id = 222
  val _name = "UALBERTA_SYS_STATUS"
  val _bundle = Bundle.ualberta
  override def toString = "UALBERTA_SYS_STATUS" + " mode=" + mode + " navMode=" + navMode + " pilot=" + pilot
}
