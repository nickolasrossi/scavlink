// Code generated by sbt-mavgen. Manual edits will be overwritten
package scavlink.connection.marshal

import scavlink.message.{Message, Bundle}
import scavlink.message.common._
import scavlink.message.enums._
import akka.util.{ByteIterator, ByteStringBuilder}

object CommonMarshaller extends BundleMarshaller {
  val bundle = Bundle.common

  def magic = Map(0 -> 50, 1 -> 124, 2 -> 137, 4 -> 237, 5 -> 217, 6 -> 104, 7 -> 119, 11 -> 89, 20 -> 214, 21 -> 159, 22 -> 220, 23 -> 168, 24 -> 24, 25 -> 23, 26 -> 170, 27 -> 144, 28 -> 67, 29 -> 115, 30 -> 39, 31 -> 246, 32 -> 185, 33 -> 104, 34 -> 237, 35 -> 244, 36 -> 222, 37 -> 212, 38 -> 9, 39 -> 254, 40 -> 230, 41 -> 28, 42 -> 28, 43 -> 132, 44 -> 221, 45 -> 232, 46 -> 11, 47 -> 153, 48 -> 41, 49 -> 39, 54 -> 15, 55 -> 3, 61 -> 153, 62 -> 183, 63 -> 51, 64 -> 82, 65 -> 118, 66 -> 148, 67 -> 21, 69 -> 243, 70 -> 124, 73 -> 38, 74 -> 20, 75 -> 158, 76 -> 152, 77 -> 143, 81 -> 106, 82 -> 49, 83 -> 22, 84 -> 143, 85 -> 140, 86 -> 5, 87 -> 150, 89 -> 231, 90 -> 183, 91 -> 63, 92 -> 54, 100 -> 175, 101 -> 102, 102 -> 158, 103 -> 208, 104 -> 56, 105 -> 93, 106 -> 138, 107 -> 108, 108 -> 32, 109 -> 185, 110 -> 84, 111 -> 34, 113 -> 124, 114 -> 237, 115 -> 4, 116 -> 76, 117 -> 128, 118 -> 56, 119 -> 116, 120 -> 134, 121 -> 237, 122 -> 203, 123 -> 250, 124 -> 87, 125 -> 203, 126 -> 220, 127 -> 25, 128 -> 226, 130 -> 29, 131 -> 223, 132 -> 85, 133 -> 6, 134 -> 229, 135 -> 203, 136 -> 1, 147 -> 154, 148 -> 49, 248 -> 8, 249 -> 204, 250 -> 49, 251 -> 170, 252 -> 44, 253 -> 83, 254 -> 46)

  def _marshal(message: Message)(implicit builder: ByteStringBuilder) = message match {
    case Heartbeat(a,b,c,d,e,f) => _uint32_t(d); _uint8_t(a); _uint8_t(b); _uint8_t(c); _uint8_t(e); _uint8_t(f)
    case SysStatus(a,b,c,d,e,f,g,h,i,j,k,l,m) => _uint32_t(a); _uint32_t(b); _uint32_t(c); _uint16_t(d); _uint16_t(e); _int16_t(f); _uint16_t(h); _uint16_t(i); _uint16_t(j); _uint16_t(k); _uint16_t(l); _uint16_t(m); _int8_t(g)
    case SystemTime(a,b) => _uint64_t(a); _uint32_t(b)
    case Ping(a,b,c,d) => _uint64_t(a); _uint32_t(b); _uint8_t(c); _uint8_t(d)
    case ChangeOperatorControl(a,b,c,d) => _uint8_t(a); _uint8_t(b); _uint8_t(c); _char_(25)(d)
    case ChangeOperatorControlAck(a,b,c) => _uint8_t(a); _uint8_t(b); _uint8_t(c)
    case AuthKey(a) => _char_(32)(a)
    case SetMode(a,b,c) => _uint32_t(c); _uint8_t(a); _uint8_t(b)
    case ParamRequestRead(a,b,c,d) => _int16_t(d); _uint8_t(a); _uint8_t(b); _char_(16)(c)
    case ParamRequestList(a,b) => _uint8_t(a); _uint8_t(b)
    case ParamValue(a,b,c,d,e) => _float(b); _uint16_t(d); _uint16_t(e); _char_(16)(a); _uint8_t(c.id)
    case ParamSet(a,b,c,d,e) => _float(d); _uint8_t(a); _uint8_t(b); _char_(16)(c); _uint8_t(e.id)
    case GpsRawInt(a,b,c,d,e,f,g,h,i,j) => _uint64_t(a); _int32_t(c); _int32_t(d); _int32_t(e); _uint16_t(f); _uint16_t(g); _uint16_t(h); _uint16_t(i); _uint8_t(b); _uint8_t(j)
    case GpsStatus(a,b,c,d,e,f) => _uint8_t(a); _uint8_t_(20)(b); _uint8_t_(20)(c); _uint8_t_(20)(d); _uint8_t_(20)(e); _uint8_t_(20)(f)
    case ScaledImu(a,b,c,d,e,f,g,h,i,j) => _uint32_t(a); _int16_t(b); _int16_t(c); _int16_t(d); _int16_t(e); _int16_t(f); _int16_t(g); _int16_t(h); _int16_t(i); _int16_t(j)
    case RawImu(a,b,c,d,e,f,g,h,i,j) => _uint64_t(a); _int16_t(b); _int16_t(c); _int16_t(d); _int16_t(e); _int16_t(f); _int16_t(g); _int16_t(h); _int16_t(i); _int16_t(j)
    case RawPressure(a,b,c,d,e) => _uint64_t(a); _int16_t(b); _int16_t(c); _int16_t(d); _int16_t(e)
    case ScaledPressure(a,b,c,d) => _uint32_t(a); _float(b); _float(c); _int16_t(d)
    case Attitude(a,b,c,d,e,f,g) => _uint32_t(a); _float(b); _float(c); _float(d); _float(e); _float(f); _float(g)
    case AttitudeQuaternion(a,b,c,d,e,f,g,h) => _uint32_t(a); _float(b); _float(c); _float(d); _float(e); _float(f); _float(g); _float(h)
    case LocalPositionNed(a,b,c,d,e,f,g) => _uint32_t(a); _float(b); _float(c); _float(d); _float(e); _float(f); _float(g)
    case GlobalPositionInt(a,b,c,d,e,f,g,h,i) => _uint32_t(a); _int32_t(b); _int32_t(c); _int32_t(d); _int32_t(e); _int16_t(f); _int16_t(g); _int16_t(h); _uint16_t(i)
    case RcChannelsScaled(a,b,c,d,e,f,g,h,i,j,k) => _uint32_t(a); _int16_t(c); _int16_t(d); _int16_t(e); _int16_t(f); _int16_t(g); _int16_t(h); _int16_t(i); _int16_t(j); _uint8_t(b); _uint8_t(k)
    case RcChannelsRaw(a,b,c,d,e,f,g,h,i,j,k) => _uint32_t(a); _uint16_t(c); _uint16_t(d); _uint16_t(e); _uint16_t(f); _uint16_t(g); _uint16_t(h); _uint16_t(i); _uint16_t(j); _uint8_t(b); _uint8_t(k)
    case ServoOutputRaw(a,b,c,d,e,f,g,h,i,j) => _uint32_t(a); _uint16_t(c); _uint16_t(d); _uint16_t(e); _uint16_t(f); _uint16_t(g); _uint16_t(h); _uint16_t(i); _uint16_t(j); _uint8_t(b)
    case MissionRequestPartialList(a,b,c,d) => _int16_t(c); _int16_t(d); _uint8_t(a); _uint8_t(b)
    case MissionWritePartialList(a,b,c,d) => _int16_t(c); _int16_t(d); _uint8_t(a); _uint8_t(b)
    case MissionItem(a,b,c,d,e,f,g,h,i,j,k,l,m,n) => _float(h); _float(i); _float(j); _float(k); _float(l); _float(m); _float(n); _uint16_t(c); _uint16_t(e); _uint8_t(a); _uint8_t(b); _uint8_t(d); _uint8_t(f); _uint8_t(g)
    case MissionRequest(a,b,c) => _uint16_t(c); _uint8_t(a); _uint8_t(b)
    case MissionSetCurrent(a,b,c) => _uint16_t(c); _uint8_t(a); _uint8_t(b)
    case MissionCurrent(a) => _uint16_t(a)
    case MissionRequestList(a,b) => _uint8_t(a); _uint8_t(b)
    case MissionCount(a,b,c) => _uint16_t(c); _uint8_t(a); _uint8_t(b)
    case MissionClearAll(a,b) => _uint8_t(a); _uint8_t(b)
    case MissionItemReached(a) => _uint16_t(a)
    case MissionAck(a,b,c) => _uint8_t(a); _uint8_t(b); _uint8_t(c.id)
    case SetGpsGlobalOrigin(a,b,c,d) => _int32_t(b); _int32_t(c); _int32_t(d); _uint8_t(a)
    case GpsGlobalOrigin(a,b,c) => _int32_t(a); _int32_t(b); _int32_t(c)
    case SafetySetAllowedArea(a,b,c,d,e,f,g,h,i) => _float(d); _float(e); _float(f); _float(g); _float(h); _float(i); _uint8_t(a); _uint8_t(b); _uint8_t(c.id)
    case SafetyAllowedArea(a,b,c,d,e,f,g) => _float(b); _float(c); _float(d); _float(e); _float(f); _float(g); _uint8_t(a.id)
    case AttitudeQuaternionCov(a,b,c,d,e,f) => _uint32_t(a); _float_4(b); _float(c); _float(d); _float(e); _float_(9)(f)
    case NavControllerOutput(a,b,c,d,e,f,g,h) => _float(a); _float(b); _float(f); _float(g); _float(h); _int16_t(c); _int16_t(d); _uint16_t(e)
    case GlobalPositionIntCov(a,b,c,d,e,f,g,h,i,j,k) => _uint64_t(b); _uint32_t(a); _int32_t(d); _int32_t(e); _int32_t(f); _int32_t(g); _float(h); _float(i); _float(j); _float_(36)(k); _uint8_t(c.id)
    case LocalPositionNedCov(a,b,c,d,e,f,g,h,i,j) => _uint64_t(b); _uint32_t(a); _float(d); _float(e); _float(f); _float(g); _float(h); _float(i); _float_(36)(j); _uint8_t(c.id)
    case RcChannels(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u) => _uint32_t(a); _uint16_t(c); _uint16_t(d); _uint16_t(e); _uint16_t(f); _uint16_t(g); _uint16_t(h); _uint16_t(i); _uint16_t(j); _uint16_t(k); _uint16_t(l); _uint16_t(m); _uint16_t(n); _uint16_t(o); _uint16_t(p); _uint16_t(q); _uint16_t(r); _uint16_t(s); _uint16_t(t); _uint8_t(b); _uint8_t(u)
    case RequestDataStream(a,b,c,d,e) => _uint16_t(d); _uint8_t(a); _uint8_t(b); _uint8_t(c); _uint8_t(e)
    case DataStream(a,b,c) => _uint16_t(b); _uint8_t(a); _uint8_t(c)
    case ManualControl(a,b,c,d,e,f) => _int16_t(b); _int16_t(c); _int16_t(d); _int16_t(e); _uint16_t(f); _uint8_t(a)
    case RcChannelsOverride(a,b,c,d,e,f,g,h,i,j) => _uint16_t(c); _uint16_t(d); _uint16_t(e); _uint16_t(f); _uint16_t(g); _uint16_t(h); _uint16_t(i); _uint16_t(j); _uint8_t(a); _uint8_t(b)
    case MissionItemInt(a,b,c,d,e,f,g,h,i,j,k,l,m,n) => _float(h); _float(i); _float(j); _float(k); _int32_t(l); _int32_t(m); _float(n); _uint16_t(c); _uint16_t(e); _uint8_t(a); _uint8_t(b); _uint8_t(d); _uint8_t(f); _uint8_t(g)
    case VfrHud(a,b,c,d,e,f) => _float(a); _float(b); _float(e); _float(f); _int16_t(c); _uint16_t(d)
    case CommandInt(a,b,c,d,e,f,g,h,i,j,k,l,m) => _float(g); _float(h); _float(i); _float(j); _int32_t(k); _int32_t(l); _float(m); _uint16_t(d); _uint8_t(a); _uint8_t(b); _uint8_t(c); _uint8_t(e); _uint8_t(f)
    case CommandLong(a,b,c,d,e,f,g,h,i,j,k) => _float(e); _float(f); _float(g); _float(h); _float(i); _float(j); _float(k); _uint16_t(c.id); _uint8_t(a); _uint8_t(b); _uint8_t(d)
    case CommandAck(a,b) => _uint16_t(a.id); _uint8_t(b)
    case ManualSetpoint(a,b,c,d,e,f,g) => _uint32_t(a); _float(b); _float(c); _float(d); _float(e); _uint8_t(f); _uint8_t(g)
    case SetAttitudeTarget(a,b,c,d,e,f,g,h,i) => _uint32_t(a); _float_4(e); _float(f); _float(g); _float(h); _float(i); _uint8_t(b); _uint8_t(c); _uint8_t(d)
    case AttitudeTarget(a,b,c,d,e,f,g) => _uint32_t(a); _float_4(c); _float(d); _float(e); _float(f); _float(g); _uint8_t(b)
    case SetPositionTargetLocalNed(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) => _uint32_t(a); _float(f); _float(g); _float(h); _float(i); _float(j); _float(k); _float(l); _float(m); _float(n); _float(o); _float(p); _uint16_t(e); _uint8_t(b); _uint8_t(c); _uint8_t(d.id)
    case PositionTargetLocalNed(a,b,c,d,e,f,g,h,i,j,k,l,m,n) => _uint32_t(a); _float(d); _float(e); _float(f); _float(g); _float(h); _float(i); _float(j); _float(k); _float(l); _float(m); _float(n); _uint16_t(c); _uint8_t(b.id)
    case SetPositionTargetGlobalInt(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) => _uint32_t(a); _int32_t(f); _int32_t(g); _float(h); _float(i); _float(j); _float(k); _float(l); _float(m); _float(n); _float(o); _float(p); _uint16_t(e); _uint8_t(b); _uint8_t(c); _uint8_t(d.id)
    case PositionTargetGlobalInt(a,b,c,d,e,f,g,h,i,j,k,l,m,n) => _uint32_t(a); _int32_t(d); _int32_t(e); _float(f); _float(g); _float(h); _float(i); _float(j); _float(k); _float(l); _float(m); _float(n); _uint16_t(c); _uint8_t(b.id)
    case LocalPositionNedSystemGlobalOffset(a,b,c,d,e,f,g) => _uint32_t(a); _float(b); _float(c); _float(d); _float(e); _float(f); _float(g)
    case HilState(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) => _uint64_t(a); _float(b); _float(c); _float(d); _float(e); _float(f); _float(g); _int32_t(h); _int32_t(i); _int32_t(j); _int16_t(k); _int16_t(l); _int16_t(m); _int16_t(n); _int16_t(o); _int16_t(p)
    case HilControls(a,b,c,d,e,f,g,h,i,j,k) => _uint64_t(a); _float(b); _float(c); _float(d); _float(e); _float(f); _float(g); _float(h); _float(i); _uint8_t(j); _uint8_t(k)
    case HilRcInputsRaw(a,b,c,d,e,f,g,h,i,j,k,l,m,n) => _uint64_t(a); _uint16_t(b); _uint16_t(c); _uint16_t(d); _uint16_t(e); _uint16_t(f); _uint16_t(g); _uint16_t(h); _uint16_t(i); _uint16_t(j); _uint16_t(k); _uint16_t(l); _uint16_t(m); _uint8_t(n)
    case OpticalFlow(a,b,c,d,e,f,g,h) => _uint64_t(a); _float(e); _float(f); _float(h); _int16_t(c); _int16_t(d); _uint8_t(b); _uint8_t(g)
    case GlobalVisionPositionEstimate(a,b,c,d,e,f,g) => _uint64_t(a); _float(b); _float(c); _float(d); _float(e); _float(f); _float(g)
    case VisionPositionEstimate(a,b,c,d,e,f,g) => _uint64_t(a); _float(b); _float(c); _float(d); _float(e); _float(f); _float(g)
    case VisionSpeedEstimate(a,b,c,d) => _uint64_t(a); _float(b); _float(c); _float(d)
    case ViconPositionEstimate(a,b,c,d,e,f,g) => _uint64_t(a); _float(b); _float(c); _float(d); _float(e); _float(f); _float(g)
    case HighresImu(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o) => _uint64_t(a); _float(b); _float(c); _float(d); _float(e); _float(f); _float(g); _float(h); _float(i); _float(j); _float(k); _float(l); _float(m); _float(n); _uint16_t(o)
    case OpticalFlowRad(a,b,c,d,e,f,g,h,i,j,k,l) => _uint64_t(a); _uint32_t(c); _float(d); _float(e); _float(f); _float(g); _float(h); _uint32_t(k); _float(l); _int16_t(i); _uint8_t(b); _uint8_t(j)
    case HilSensor(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o) => _uint64_t(a); _float(b); _float(c); _float(d); _float(e); _float(f); _float(g); _float(h); _float(i); _float(j); _float(k); _float(l); _float(m); _float(n); _uint32_t(o)
    case SimState(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u) => _float(a); _float(b); _float(c); _float(d); _float(e); _float(f); _float(g); _float(h); _float(i); _float(j); _float(k); _float(l); _float(m); _float(n); _float(o); _float(p); _float(q); _float(r); _float(s); _float(t); _float(u)
    case RadioStatus(a,b,c,d,e,f,g) => _uint16_t(f); _uint16_t(g); _uint8_t(a); _uint8_t(b); _uint8_t(c); _uint8_t(d); _uint8_t(e)
    case FileTransferProtocol(a,b,c,d) => _uint8_t(a); _uint8_t(b); _uint8_t(c); _uint8_t_(251)(d)
    case Timesync(a,b) => _int64_t(a); _int64_t(b)
    case HilGps(a,b,c,d,e,f,g,h,i,j,k,l,m) => _uint64_t(a); _int32_t(c); _int32_t(d); _int32_t(e); _uint16_t(f); _uint16_t(g); _uint16_t(h); _int16_t(i); _int16_t(j); _int16_t(k); _uint16_t(l); _uint8_t(b); _uint8_t(m)
    case HilOpticalFlow(a,b,c,d,e,f,g,h,i,j,k,l) => _uint64_t(a); _uint32_t(c); _float(d); _float(e); _float(f); _float(g); _float(h); _uint32_t(k); _float(l); _int16_t(i); _uint8_t(b); _uint8_t(j)
    case HilStateQuaternion(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) => _uint64_t(a); _float_4(b); _float(c); _float(d); _float(e); _int32_t(f); _int32_t(g); _int32_t(h); _int16_t(i); _int16_t(j); _int16_t(k); _uint16_t(l); _uint16_t(m); _int16_t(n); _int16_t(o); _int16_t(p)
    case ScaledImu2(a,b,c,d,e,f,g,h,i,j) => _uint32_t(a); _int16_t(b); _int16_t(c); _int16_t(d); _int16_t(e); _int16_t(f); _int16_t(g); _int16_t(h); _int16_t(i); _int16_t(j)
    case LogRequestList(a,b,c,d) => _uint16_t(c); _uint16_t(d); _uint8_t(a); _uint8_t(b)
    case LogEntry(a,b,c,d,e) => _uint32_t(d); _uint32_t(e); _uint16_t(a); _uint16_t(b); _uint16_t(c)
    case LogRequestData(a,b,c,d,e) => _uint32_t(d); _uint32_t(e); _uint16_t(c); _uint8_t(a); _uint8_t(b)
    case LogData(a,b,c,d) => _uint32_t(b); _uint16_t(a); _uint8_t(c); _uint8_t_(90)(d)
    case LogErase(a,b) => _uint8_t(a); _uint8_t(b)
    case LogRequestEnd(a,b) => _uint8_t(a); _uint8_t(b)
    case GpsInjectData(a,b,c,d) => _uint8_t(a); _uint8_t(b); _uint8_t(c); _uint8_t_(110)(d)
    case Gps2Raw(a,b,c,d,e,f,g,h,i,j,k,l) => _uint64_t(a); _int32_t(c); _int32_t(d); _int32_t(e); _uint32_t(l); _uint16_t(f); _uint16_t(g); _uint16_t(h); _uint16_t(i); _uint8_t(b); _uint8_t(j); _uint8_t(k)
    case PowerStatus(a,b,c) => _uint16_t(a); _uint16_t(b); _uint16_t(c)
    case SerialControl(a,b,c,d,e,f) => _uint32_t(d); _uint16_t(c); _uint8_t(a); _uint8_t(b); _uint8_t(e); _uint8_t_(70)(f)
    case GpsRtk(a,b,c,d,e,f,g,h,i,j,k,l,m) => _uint32_t(a); _uint32_t(d); _int32_t(i); _int32_t(j); _int32_t(k); _uint32_t(l); _int32_t(m); _uint16_t(c); _uint8_t(b); _uint8_t(e); _uint8_t(f); _uint8_t(g); _uint8_t(h)
    case Gps2Rtk(a,b,c,d,e,f,g,h,i,j,k,l,m) => _uint32_t(a); _uint32_t(d); _int32_t(i); _int32_t(j); _int32_t(k); _uint32_t(l); _int32_t(m); _uint16_t(c); _uint8_t(b); _uint8_t(e); _uint8_t(f); _uint8_t(g); _uint8_t(h)
    case DataTransmissionHandshake(a,b,c,d,e,f,g) => _uint32_t(b); _uint16_t(c); _uint16_t(d); _uint16_t(e); _uint8_t(a); _uint8_t(f); _uint8_t(g)
    case EncapsulatedData(a,b) => _uint16_t(a); _uint8_t_(253)(b)
    case DistanceSensor(a,b,c,d,e,f,g,h) => _uint32_t(a); _uint16_t(b); _uint16_t(c); _uint16_t(d); _uint8_t(e); _uint8_t(f); _uint8_t(g); _uint8_t(h)
    case TerrainRequest(a,b,c,d) => _uint64_t(d); _int32_t(a); _int32_t(b); _uint16_t(c)
    case TerrainData(a,b,c,d,e) => _int32_t(a); _int32_t(b); _uint16_t(c); _int16_t_(16)(e); _uint8_t(d)
    case TerrainCheck(a,b) => _int32_t(a); _int32_t(b)
    case TerrainReport(a,b,c,d,e,f,g) => _int32_t(a); _int32_t(b); _float(d); _float(e); _uint16_t(c); _uint16_t(f); _uint16_t(g)
    case BatteryStatus(a,b,c,d,e,f,g,h,i) => _int32_t(g); _int32_t(h); _int16_t(d); _uint16_t_(10)(e); _int16_t(f); _uint8_t(a); _uint8_t(b.id); _uint8_t(c.id); _int8_t(i)
    case AutopilotVersion(a,b,c) => _uint64_t(a); _uint32_t(b); _uint8_t_(8)(c)
    case V2Extension(a,b,c,d,e) => _uint16_t(d); _uint8_t(a); _uint8_t(b); _uint8_t(c); _uint8_t_(249)(e)
    case MemoryVect(a,b,c,d) => _uint16_t(a); _uint8_t(b); _uint8_t(c); _int8_t_(32)(d)
    case DebugVect(a,b,c,d,e) => _uint64_t(b); _float(c); _float(d); _float(e); _char_(10)(a)
    case NamedValueFloat(a,b,c) => _uint32_t(a); _float(c); _char_(10)(b)
    case NamedValueInt(a,b,c) => _uint32_t(a); _int32_t(c); _char_(10)(b)
    case Statustext(a,b) => _uint8_t(a.id); _char_(50)(b)
    case Debug(a,b,c) => _uint32_t(a); _float(c); _uint8_t(b)
  }

  def _unmarshal(msgId: Int)(implicit iter: ByteIterator) = msgId match {
    case 0 => Heartbeat(customMode=uint32_t, `type`=uint8_t, autopilot=uint8_t, baseMode=uint8_t, systemStatus=uint8_t, mavlinkVersion=uint8_t)
    case 1 => SysStatus(onboardControlSensorsPresent=uint32_t, onboardControlSensorsEnabled=uint32_t, onboardControlSensorsHealth=uint32_t, load=uint16_t, voltageBattery=uint16_t, currentBattery=int16_t, dropRateComm=uint16_t, errorsComm=uint16_t, errorsCount1=uint16_t, errorsCount2=uint16_t, errorsCount3=uint16_t, errorsCount4=uint16_t, batteryRemaining=int8_t)
    case 2 => SystemTime(timeUnixUsec=uint64_t, timeBootMs=uint32_t)
    case 4 => Ping(timeUsec=uint64_t, seq=uint32_t, targetSystem=uint8_t, targetComponent=uint8_t)
    case 5 => ChangeOperatorControl(targetSystem=uint8_t, controlRequest=uint8_t, version=uint8_t, passkey=char_(25))
    case 6 => ChangeOperatorControlAck(gcsSystemId=uint8_t, controlRequest=uint8_t, ack=uint8_t)
    case 7 => AuthKey(key=char_(32))
    case 11 => SetMode(customMode=uint32_t, targetSystem=uint8_t, baseMode=uint8_t)
    case 20 => ParamRequestRead(paramIndex=int16_t, targetSystem=uint8_t, targetComponent=uint8_t, paramId=char_(16))
    case 21 => ParamRequestList(targetSystem=uint8_t, targetComponent=uint8_t)
    case 22 => ParamValue(paramValue=float, paramCount=uint16_t, paramIndex=uint16_t, paramId=char_(16), paramType=MavParamType(uint8_t))
    case 23 => ParamSet(paramValue=float, targetSystem=uint8_t, targetComponent=uint8_t, paramId=char_(16), paramType=MavParamType(uint8_t))
    case 24 => GpsRawInt(timeUsec=uint64_t, lat=int32_t, lon=int32_t, alt=int32_t, eph=uint16_t, epv=uint16_t, vel=uint16_t, cog=uint16_t, fixType=uint8_t, satellitesVisible=uint8_t)
    case 25 => GpsStatus(satellitesVisible=uint8_t, satellitePrn=uint8_t_(20), satelliteUsed=uint8_t_(20), satelliteElevation=uint8_t_(20), satelliteAzimuth=uint8_t_(20), satelliteSnr=uint8_t_(20))
    case 26 => ScaledImu(timeBootMs=uint32_t, xacc=int16_t, yacc=int16_t, zacc=int16_t, xgyro=int16_t, ygyro=int16_t, zgyro=int16_t, xmag=int16_t, ymag=int16_t, zmag=int16_t)
    case 27 => RawImu(timeUsec=uint64_t, xacc=int16_t, yacc=int16_t, zacc=int16_t, xgyro=int16_t, ygyro=int16_t, zgyro=int16_t, xmag=int16_t, ymag=int16_t, zmag=int16_t)
    case 28 => RawPressure(timeUsec=uint64_t, pressAbs=int16_t, pressDiff1=int16_t, pressDiff2=int16_t, temperature=int16_t)
    case 29 => ScaledPressure(timeBootMs=uint32_t, pressAbs=float, pressDiff=float, temperature=int16_t)
    case 30 => Attitude(timeBootMs=uint32_t, roll=float, pitch=float, yaw=float, rollspeed=float, pitchspeed=float, yawspeed=float)
    case 31 => AttitudeQuaternion(timeBootMs=uint32_t, q1=float, q2=float, q3=float, q4=float, rollspeed=float, pitchspeed=float, yawspeed=float)
    case 32 => LocalPositionNed(timeBootMs=uint32_t, x=float, y=float, z=float, vx=float, vy=float, vz=float)
    case 33 => GlobalPositionInt(timeBootMs=uint32_t, lat=int32_t, lon=int32_t, alt=int32_t, relativeAlt=int32_t, vx=int16_t, vy=int16_t, vz=int16_t, hdg=uint16_t)
    case 34 => RcChannelsScaled(timeBootMs=uint32_t, chan1Scaled=int16_t, chan2Scaled=int16_t, chan3Scaled=int16_t, chan4Scaled=int16_t, chan5Scaled=int16_t, chan6Scaled=int16_t, chan7Scaled=int16_t, chan8Scaled=int16_t, port=uint8_t, rssi=uint8_t)
    case 35 => RcChannelsRaw(timeBootMs=uint32_t, chan1Raw=uint16_t, chan2Raw=uint16_t, chan3Raw=uint16_t, chan4Raw=uint16_t, chan5Raw=uint16_t, chan6Raw=uint16_t, chan7Raw=uint16_t, chan8Raw=uint16_t, port=uint8_t, rssi=uint8_t)
    case 36 => ServoOutputRaw(timeUsec=uint32_t, servo1Raw=uint16_t, servo2Raw=uint16_t, servo3Raw=uint16_t, servo4Raw=uint16_t, servo5Raw=uint16_t, servo6Raw=uint16_t, servo7Raw=uint16_t, servo8Raw=uint16_t, port=uint8_t)
    case 37 => MissionRequestPartialList(startIndex=int16_t, endIndex=int16_t, targetSystem=uint8_t, targetComponent=uint8_t)
    case 38 => MissionWritePartialList(startIndex=int16_t, endIndex=int16_t, targetSystem=uint8_t, targetComponent=uint8_t)
    case 39 => MissionItem(param1=float, param2=float, param3=float, param4=float, x=float, y=float, z=float, seq=uint16_t, command=uint16_t, targetSystem=uint8_t, targetComponent=uint8_t, frame=uint8_t, current=uint8_t, autocontinue=uint8_t)
    case 40 => MissionRequest(seq=uint16_t, targetSystem=uint8_t, targetComponent=uint8_t)
    case 41 => MissionSetCurrent(seq=uint16_t, targetSystem=uint8_t, targetComponent=uint8_t)
    case 42 => MissionCurrent(seq=uint16_t)
    case 43 => MissionRequestList(targetSystem=uint8_t, targetComponent=uint8_t)
    case 44 => MissionCount(count=uint16_t, targetSystem=uint8_t, targetComponent=uint8_t)
    case 45 => MissionClearAll(targetSystem=uint8_t, targetComponent=uint8_t)
    case 46 => MissionItemReached(seq=uint16_t)
    case 47 => MissionAck(targetSystem=uint8_t, targetComponent=uint8_t, `type`=MavMissionResult(uint8_t))
    case 48 => SetGpsGlobalOrigin(latitude=int32_t, longitude=int32_t, altitude=int32_t, targetSystem=uint8_t)
    case 49 => GpsGlobalOrigin(latitude=int32_t, longitude=int32_t, altitude=int32_t)
    case 54 => SafetySetAllowedArea(p1x=float, p1y=float, p1z=float, p2x=float, p2y=float, p2z=float, targetSystem=uint8_t, targetComponent=uint8_t, frame=MavFrame(uint8_t))
    case 55 => SafetyAllowedArea(p1x=float, p1y=float, p1z=float, p2x=float, p2y=float, p2z=float, frame=MavFrame(uint8_t))
    case 61 => AttitudeQuaternionCov(timeBootMs=uint32_t, q=float_4, rollspeed=float, pitchspeed=float, yawspeed=float, covariance=float_(9))
    case 62 => NavControllerOutput(navRoll=float, navPitch=float, altError=float, aspdError=float, xtrackError=float, navBearing=int16_t, targetBearing=int16_t, wpDist=uint16_t)
    case 63 => GlobalPositionIntCov(timeUtc=uint64_t, timeBootMs=uint32_t, lat=int32_t, lon=int32_t, alt=int32_t, relativeAlt=int32_t, vx=float, vy=float, vz=float, covariance=float_(36), estimatorType=MavEstimatorType(uint8_t))
    case 64 => LocalPositionNedCov(timeUtc=uint64_t, timeBootMs=uint32_t, x=float, y=float, z=float, vx=float, vy=float, vz=float, covariance=float_(36), estimatorType=MavEstimatorType(uint8_t))
    case 65 => RcChannels(timeBootMs=uint32_t, chan1Raw=uint16_t, chan2Raw=uint16_t, chan3Raw=uint16_t, chan4Raw=uint16_t, chan5Raw=uint16_t, chan6Raw=uint16_t, chan7Raw=uint16_t, chan8Raw=uint16_t, chan9Raw=uint16_t, chan10Raw=uint16_t, chan11Raw=uint16_t, chan12Raw=uint16_t, chan13Raw=uint16_t, chan14Raw=uint16_t, chan15Raw=uint16_t, chan16Raw=uint16_t, chan17Raw=uint16_t, chan18Raw=uint16_t, chancount=uint8_t, rssi=uint8_t)
    case 66 => RequestDataStream(reqMessageRate=uint16_t, targetSystem=uint8_t, targetComponent=uint8_t, reqStreamId=uint8_t, startStop=uint8_t)
    case 67 => DataStream(messageRate=uint16_t, streamId=uint8_t, onOff=uint8_t)
    case 69 => ManualControl(x=int16_t, y=int16_t, z=int16_t, r=int16_t, buttons=uint16_t, targetSystem=uint8_t)
    case 70 => RcChannelsOverride(chan1Raw=uint16_t, chan2Raw=uint16_t, chan3Raw=uint16_t, chan4Raw=uint16_t, chan5Raw=uint16_t, chan6Raw=uint16_t, chan7Raw=uint16_t, chan8Raw=uint16_t, targetSystem=uint8_t, targetComponent=uint8_t)
    case 73 => MissionItemInt(param1=float, param2=float, param3=float, param4=float, x=int32_t, y=int32_t, z=float, seq=uint16_t, command=uint16_t, targetSystem=uint8_t, targetComponent=uint8_t, frame=uint8_t, current=uint8_t, autocontinue=uint8_t)
    case 74 => VfrHud(airspeed=float, groundspeed=float, alt=float, climb=float, heading=int16_t, throttle=uint16_t)
    case 75 => CommandInt(param1=float, param2=float, param3=float, param4=float, x=int32_t, y=int32_t, z=float, command=uint16_t, targetSystem=uint8_t, targetComponent=uint8_t, frame=uint8_t, current=uint8_t, autocontinue=uint8_t)
    case 76 => CommandLong(param1=float, param2=float, param3=float, param4=float, param5=float, param6=float, param7=float, command=MavCmd(uint16_t), targetSystem=uint8_t, targetComponent=uint8_t, confirmation=uint8_t)
    case 77 => CommandAck(command=MavCmd(uint16_t), result=uint8_t)
    case 81 => ManualSetpoint(timeBootMs=uint32_t, roll=float, pitch=float, yaw=float, thrust=float, modeSwitch=uint8_t, manualOverrideSwitch=uint8_t)
    case 82 => SetAttitudeTarget(timeBootMs=uint32_t, q=float_4, bodyRollRate=float, bodyPitchRate=float, bodyYawRate=float, thrust=float, targetSystem=uint8_t, targetComponent=uint8_t, typeMask=uint8_t)
    case 83 => AttitudeTarget(timeBootMs=uint32_t, q=float_4, bodyRollRate=float, bodyPitchRate=float, bodyYawRate=float, thrust=float, typeMask=uint8_t)
    case 84 => SetPositionTargetLocalNed(timeBootMs=uint32_t, x=float, y=float, z=float, vx=float, vy=float, vz=float, afx=float, afy=float, afz=float, yaw=float, yawRate=float, typeMask=uint16_t, targetSystem=uint8_t, targetComponent=uint8_t, coordinateFrame=MavFrame(uint8_t))
    case 85 => PositionTargetLocalNed(timeBootMs=uint32_t, x=float, y=float, z=float, vx=float, vy=float, vz=float, afx=float, afy=float, afz=float, yaw=float, yawRate=float, typeMask=uint16_t, coordinateFrame=MavFrame(uint8_t))
    case 86 => SetPositionTargetGlobalInt(timeBootMs=uint32_t, latInt=int32_t, lonInt=int32_t, alt=float, vx=float, vy=float, vz=float, afx=float, afy=float, afz=float, yaw=float, yawRate=float, typeMask=uint16_t, targetSystem=uint8_t, targetComponent=uint8_t, coordinateFrame=MavFrame(uint8_t))
    case 87 => PositionTargetGlobalInt(timeBootMs=uint32_t, latInt=int32_t, lonInt=int32_t, alt=float, vx=float, vy=float, vz=float, afx=float, afy=float, afz=float, yaw=float, yawRate=float, typeMask=uint16_t, coordinateFrame=MavFrame(uint8_t))
    case 89 => LocalPositionNedSystemGlobalOffset(timeBootMs=uint32_t, x=float, y=float, z=float, roll=float, pitch=float, yaw=float)
    case 90 => HilState(timeUsec=uint64_t, roll=float, pitch=float, yaw=float, rollspeed=float, pitchspeed=float, yawspeed=float, lat=int32_t, lon=int32_t, alt=int32_t, vx=int16_t, vy=int16_t, vz=int16_t, xacc=int16_t, yacc=int16_t, zacc=int16_t)
    case 91 => HilControls(timeUsec=uint64_t, rollAilerons=float, pitchElevator=float, yawRudder=float, throttle=float, aux1=float, aux2=float, aux3=float, aux4=float, mode=uint8_t, navMode=uint8_t)
    case 92 => HilRcInputsRaw(timeUsec=uint64_t, chan1Raw=uint16_t, chan2Raw=uint16_t, chan3Raw=uint16_t, chan4Raw=uint16_t, chan5Raw=uint16_t, chan6Raw=uint16_t, chan7Raw=uint16_t, chan8Raw=uint16_t, chan9Raw=uint16_t, chan10Raw=uint16_t, chan11Raw=uint16_t, chan12Raw=uint16_t, rssi=uint8_t)
    case 100 => OpticalFlow(timeUsec=uint64_t, flowCompMX=float, flowCompMY=float, groundDistance=float, flowX=int16_t, flowY=int16_t, sensorId=uint8_t, quality=uint8_t)
    case 101 => GlobalVisionPositionEstimate(usec=uint64_t, x=float, y=float, z=float, roll=float, pitch=float, yaw=float)
    case 102 => VisionPositionEstimate(usec=uint64_t, x=float, y=float, z=float, roll=float, pitch=float, yaw=float)
    case 103 => VisionSpeedEstimate(usec=uint64_t, x=float, y=float, z=float)
    case 104 => ViconPositionEstimate(usec=uint64_t, x=float, y=float, z=float, roll=float, pitch=float, yaw=float)
    case 105 => HighresImu(timeUsec=uint64_t, xacc=float, yacc=float, zacc=float, xgyro=float, ygyro=float, zgyro=float, xmag=float, ymag=float, zmag=float, absPressure=float, diffPressure=float, pressureAlt=float, temperature=float, fieldsUpdated=uint16_t)
    case 106 => OpticalFlowRad(timeUsec=uint64_t, integrationTimeUs=uint32_t, integratedX=float, integratedY=float, integratedXgyro=float, integratedYgyro=float, integratedZgyro=float, timeDeltaDistanceUs=uint32_t, distance=float, temperature=int16_t, sensorId=uint8_t, quality=uint8_t)
    case 107 => HilSensor(timeUsec=uint64_t, xacc=float, yacc=float, zacc=float, xgyro=float, ygyro=float, zgyro=float, xmag=float, ymag=float, zmag=float, absPressure=float, diffPressure=float, pressureAlt=float, temperature=float, fieldsUpdated=uint32_t)
    case 108 => SimState(q1=float, q2=float, q3=float, q4=float, roll=float, pitch=float, yaw=float, xacc=float, yacc=float, zacc=float, xgyro=float, ygyro=float, zgyro=float, lat=float, lon=float, alt=float, stdDevHorz=float, stdDevVert=float, vn=float, ve=float, vd=float)
    case 109 => RadioStatus(rxerrors=uint16_t, fixed=uint16_t, rssi=uint8_t, remrssi=uint8_t, txbuf=uint8_t, noise=uint8_t, remnoise=uint8_t)
    case 110 => FileTransferProtocol(targetNetwork=uint8_t, targetSystem=uint8_t, targetComponent=uint8_t, payload=uint8_t_(251))
    case 111 => Timesync(tc1=int64_t, ts1=int64_t)
    case 113 => HilGps(timeUsec=uint64_t, lat=int32_t, lon=int32_t, alt=int32_t, eph=uint16_t, epv=uint16_t, vel=uint16_t, vn=int16_t, ve=int16_t, vd=int16_t, cog=uint16_t, fixType=uint8_t, satellitesVisible=uint8_t)
    case 114 => HilOpticalFlow(timeUsec=uint64_t, integrationTimeUs=uint32_t, integratedX=float, integratedY=float, integratedXgyro=float, integratedYgyro=float, integratedZgyro=float, timeDeltaDistanceUs=uint32_t, distance=float, temperature=int16_t, sensorId=uint8_t, quality=uint8_t)
    case 115 => HilStateQuaternion(timeUsec=uint64_t, attitudeQuaternion=float_4, rollspeed=float, pitchspeed=float, yawspeed=float, lat=int32_t, lon=int32_t, alt=int32_t, vx=int16_t, vy=int16_t, vz=int16_t, indAirspeed=uint16_t, trueAirspeed=uint16_t, xacc=int16_t, yacc=int16_t, zacc=int16_t)
    case 116 => ScaledImu2(timeBootMs=uint32_t, xacc=int16_t, yacc=int16_t, zacc=int16_t, xgyro=int16_t, ygyro=int16_t, zgyro=int16_t, xmag=int16_t, ymag=int16_t, zmag=int16_t)
    case 117 => LogRequestList(start=uint16_t, end=uint16_t, targetSystem=uint8_t, targetComponent=uint8_t)
    case 118 => LogEntry(timeUtc=uint32_t, size=uint32_t, id=uint16_t, numLogs=uint16_t, lastLogNum=uint16_t)
    case 119 => LogRequestData(ofs=uint32_t, count=uint32_t, id=uint16_t, targetSystem=uint8_t, targetComponent=uint8_t)
    case 120 => LogData(ofs=uint32_t, id=uint16_t, count=uint8_t, data=uint8_t_(90))
    case 121 => LogErase(targetSystem=uint8_t, targetComponent=uint8_t)
    case 122 => LogRequestEnd(targetSystem=uint8_t, targetComponent=uint8_t)
    case 123 => GpsInjectData(targetSystem=uint8_t, targetComponent=uint8_t, len=uint8_t, data=uint8_t_(110))
    case 124 => Gps2Raw(timeUsec=uint64_t, lat=int32_t, lon=int32_t, alt=int32_t, dgpsAge=uint32_t, eph=uint16_t, epv=uint16_t, vel=uint16_t, cog=uint16_t, fixType=uint8_t, satellitesVisible=uint8_t, dgpsNumch=uint8_t)
    case 125 => PowerStatus(vcc=uint16_t, vservo=uint16_t, flags=uint16_t)
    case 126 => SerialControl(baudrate=uint32_t, timeout=uint16_t, device=uint8_t, flags=uint8_t, count=uint8_t, data=uint8_t_(70))
    case 127 => GpsRtk(timeLastBaselineMs=uint32_t, tow=uint32_t, baselineAMm=int32_t, baselineBMm=int32_t, baselineCMm=int32_t, accuracy=uint32_t, iarNumHypotheses=int32_t, wn=uint16_t, rtkReceiverId=uint8_t, rtkHealth=uint8_t, rtkRate=uint8_t, nsats=uint8_t, baselineCoordsType=uint8_t)
    case 128 => Gps2Rtk(timeLastBaselineMs=uint32_t, tow=uint32_t, baselineAMm=int32_t, baselineBMm=int32_t, baselineCMm=int32_t, accuracy=uint32_t, iarNumHypotheses=int32_t, wn=uint16_t, rtkReceiverId=uint8_t, rtkHealth=uint8_t, rtkRate=uint8_t, nsats=uint8_t, baselineCoordsType=uint8_t)
    case 130 => DataTransmissionHandshake(size=uint32_t, width=uint16_t, height=uint16_t, packets=uint16_t, `type`=uint8_t, payload=uint8_t, jpgQuality=uint8_t)
    case 131 => EncapsulatedData(seqnr=uint16_t, data=uint8_t_(253))
    case 132 => DistanceSensor(timeBootMs=uint32_t, minDistance=uint16_t, maxDistance=uint16_t, currentDistance=uint16_t, `type`=uint8_t, id=uint8_t, orientation=uint8_t, covariance=uint8_t)
    case 133 => TerrainRequest(mask=uint64_t, lat=int32_t, lon=int32_t, gridSpacing=uint16_t)
    case 134 => TerrainData(lat=int32_t, lon=int32_t, gridSpacing=uint16_t, data=int16_t_(16), gridbit=uint8_t)
    case 135 => TerrainCheck(lat=int32_t, lon=int32_t)
    case 136 => TerrainReport(lat=int32_t, lon=int32_t, terrainHeight=float, currentHeight=float, spacing=uint16_t, pending=uint16_t, loaded=uint16_t)
    case 147 => BatteryStatus(currentConsumed=int32_t, energyConsumed=int32_t, temperature=int16_t, voltages=uint16_t_(10), currentBattery=int16_t, id=uint8_t, batteryFunction=MavBatteryFunction(uint8_t), `type`=MavBatteryType(uint8_t), batteryRemaining=int8_t)
    case 148 => AutopilotVersion(capabilities=uint64_t, version=uint32_t, customVersion=uint8_t_(8))
    case 248 => V2Extension(messageType=uint16_t, targetNetwork=uint8_t, targetSystem=uint8_t, targetComponent=uint8_t, payload=uint8_t_(249))
    case 249 => MemoryVect(address=uint16_t, ver=uint8_t, `type`=uint8_t, value=int8_t_(32))
    case 250 => DebugVect(timeUsec=uint64_t, x=float, y=float, z=float, name=char_(10))
    case 251 => NamedValueFloat(timeBootMs=uint32_t, value=float, name=char_(10))
    case 252 => NamedValueInt(timeBootMs=uint32_t, value=int32_t, name=char_(10))
    case 253 => Statustext(severity=MavSeverity(uint8_t), text=char_(50))
    case 254 => Debug(timeBootMs=uint32_t, value=float, ind=uint8_t)
  }
}
