// Code generated by sbt-mavgen. Manual edits will be overwritten
package scavlink.connection.marshal

import scavlink.message.{Message, Bundle}
import scavlink.message.pixhawk._
import scavlink.message.enums._
import akka.util.{ByteIterator, ByteStringBuilder}

object PixhawkMarshaller extends BundleMarshaller {
  val bundle = Bundle.pixhawk

  def magic = Map(151 -> 108, 152 -> 86, 153 -> 95, 154 -> 224, 160 -> 22, 170 -> 28, 171 -> 249, 172 -> 182, 180 -> 153, 181 -> 16, 182 -> 29, 183 -> 162, 190 -> 90, 191 -> 95, 192 -> 36, 195 -> 88, 200 -> 254, 205 -> 87, 206 -> 19)

  def _marshal(message: Message)(implicit builder: ByteStringBuilder) = message match {
    case SetCamShutter(a,b,c,d,e,f) => _float(f); _uint16_t(d); _uint16_t(e); _uint8_t(a); _uint8_t(b); _uint8_t(c)
    case ImageTriggered(a,b,c,d,e,f,g,h,i,j,k,l) => _uint64_t(a); _uint32_t(b); _float(c); _float(d); _float(e); _float(f); _float(g); _float(h); _float(i); _float(j); _float(k); _float(l)
    case ImageTriggerControl(a) => _uint8_t(a)
    case ImageAvailable(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u) => _uint64_t(a); _uint64_t(c); _uint64_t(d); _uint32_t(e); _uint32_t(f); _uint32_t(k); _uint32_t(l); _float(m); _float(n); _float(o); _float(p); _float(q); _float(r); _float(s); _float(t); _float_3(u); _uint16_t(g); _uint16_t(h); _uint16_t(i); _uint8_t(b); _uint8_t(j)
    case SetPositionControlOffset(a,b,c,d,e,f) => _float(c); _float(d); _float(e); _float(f); _uint8_t(a); _uint8_t(b)
    case PositionControlSetpoint(a,b,c,d,e) => _float(b); _float(c); _float(d); _float(e); _uint16_t(a)
    case Marker(a,b,c,d,e,f,g) => _float(b); _float(c); _float(d); _float(e); _float(f); _float(g); _uint16_t(a)
    case RawAux(a,b,c,d,e,f,g) => _int32_t(g); _uint16_t(a); _uint16_t(b); _uint16_t(c); _uint16_t(d); _uint16_t(e); _int16_t(f)
    case WatchdogHeartbeat(a,b) => _uint16_t(a); _uint16_t(b)
    case WatchdogProcessInfo(a,b,c,d,e) => _int32_t(e); _uint16_t(a); _uint16_t(b); _char_(100)(c); _char_(147)(d)
    case WatchdogProcessStatus(a,b,c,d,e,f) => _int32_t(e); _uint16_t(a); _uint16_t(b); _uint16_t(f); _uint8_t(c); _uint8_t(d)
    case WatchdogCommand(a,b,c,d) => _uint16_t(b); _uint16_t(c); _uint8_t(a); _uint8_t(d)
    case PatternDetected(a,b,c,d) => _float(b); _uint8_t(a); _char_(100)(c); _uint8_t(d)
    case PointOfInterest(a,b,c,d,e,f,g,h) => _float(e); _float(f); _float(g); _uint16_t(d); _uint8_t(a); _uint8_t(b); _uint8_t(c); _char_(26)(h)
    case PointOfInterestConnection(a,b,c,d,e,f,g,h,i,j,k) => _float(e); _float(f); _float(g); _float(h); _float(i); _float(j); _uint16_t(d); _uint8_t(a); _uint8_t(b); _uint8_t(c); _char_(26)(k)
    case BriefFeature(a,b,c,d,e,f,g,h) => _float(a); _float(b); _float(c); _float(h); _uint16_t(e); _uint16_t(f); _uint8_t(d); _uint8_t_(32)(g)
    case AttitudeControl(a,b,c,d,e,f,g,h,i) => _float(b); _float(c); _float(d); _float(e); _uint8_t(a); _uint8_t(f); _uint8_t(g); _uint8_t(h); _uint8_t(i)
    case DetectionStats(a,b,c,d,e,f,g,h,i,j,k,l) => _uint32_t(a); _uint32_t(b); _float(c); _int32_t(d); _int32_t(e); _int32_t(f); _uint32_t(g); _uint32_t(h); _uint32_t(i); _uint32_t(j); _uint32_t(k); _float(l)
    case OnboardHealth(a,b,c,d,e,f,g,h,i,j,k,l,m,n) => _uint32_t(a); _float(e); _float(g); _float(j); _float(k); _float(l); _float(m); _float(n); _uint16_t(b); _uint8_t(c); _uint8_t(d); _uint8_t(f); _int8_t(h); _uint8_t(i)
  }

  def _unmarshal(msgId: Int)(implicit iter: ByteIterator) = msgId match {
    case 151 => SetCamShutter(gain=float, interval=uint16_t, exposure=uint16_t, camNo=uint8_t, camMode=uint8_t, triggerPin=uint8_t)
    case 152 => ImageTriggered(timestamp=uint64_t, seq=uint32_t, roll=float, pitch=float, yaw=float, localZ=float, lat=float, lon=float, alt=float, groundX=float, groundY=float, groundZ=float)
    case 153 => ImageTriggerControl(enable=uint8_t)
    case 154 => ImageAvailable(camId=uint64_t, timestamp=uint64_t, validUntil=uint64_t, imgSeq=uint32_t, imgBufIndex=uint32_t, key=uint32_t, exposure=uint32_t, gain=float, roll=float, pitch=float, yaw=float, localZ=float, lat=float, lon=float, alt=float, groundXYZ=float_3, width=uint16_t, height=uint16_t, depth=uint16_t, camNo=uint8_t, channels=uint8_t)
    case 160 => SetPositionControlOffset(x=float, y=float, z=float, yaw=float, targetSystem=uint8_t, targetComponent=uint8_t)
    case 170 => PositionControlSetpoint(x=float, y=float, z=float, yaw=float, id=uint16_t)
    case 171 => Marker(x=float, y=float, z=float, roll=float, pitch=float, yaw=float, id=uint16_t)
    case 172 => RawAux(baro=int32_t, adc1=uint16_t, adc2=uint16_t, adc3=uint16_t, adc4=uint16_t, vbat=uint16_t, temp=int16_t)
    case 180 => WatchdogHeartbeat(watchdogId=uint16_t, processCount=uint16_t)
    case 181 => WatchdogProcessInfo(timeout=int32_t, watchdogId=uint16_t, processId=uint16_t, name=char_(100), arguments=char_(147))
    case 182 => WatchdogProcessStatus(pid=int32_t, watchdogId=uint16_t, processId=uint16_t, crashes=uint16_t, state=uint8_t, muted=uint8_t)
    case 183 => WatchdogCommand(watchdogId=uint16_t, processId=uint16_t, targetSystem=uint8_t, commandId=uint8_t)
    case 190 => PatternDetected(confidence=float, `type`=uint8_t, file=char_(100), detected=uint8_t)
    case 191 => PointOfInterest(x=float, y=float, z=float, timeout=uint16_t, `type`=uint8_t, color=uint8_t, coordinateSystem=uint8_t, name=char_(26))
    case 192 => PointOfInterestConnection(xp1=float, yp1=float, zp1=float, xp2=float, yp2=float, zp2=float, timeout=uint16_t, `type`=uint8_t, color=uint8_t, coordinateSystem=uint8_t, name=char_(26))
    case 195 => BriefFeature(x=float, y=float, z=float, response=float, size=uint16_t, orientation=uint16_t, orientationAssignment=uint8_t, descriptor=uint8_t_(32))
    case 200 => AttitudeControl(roll=float, pitch=float, yaw=float, thrust=float, targetSystem=uint8_t, rollManual=uint8_t, pitchManual=uint8_t, yawManual=uint8_t, thrustManual=uint8_t)
    case 205 => DetectionStats(detections=uint32_t, clusterIters=uint32_t, bestScore=float, bestLat=int32_t, bestLon=int32_t, bestAlt=int32_t, bestDetectionId=uint32_t, bestClusterId=uint32_t, bestClusterIterId=uint32_t, imagesDone=uint32_t, imagesTodo=uint32_t, fps=float)
    case 206 => OnboardHealth(uptime=uint32_t, ramTotal=float, swapTotal=float, diskTotal=float, temp=float, voltage=float, networkLoadIn=float, networkLoadOut=float, cpuFreq=uint16_t, cpuLoad=uint8_t, ramUsage=uint8_t, swapUsage=uint8_t, diskHealth=int8_t, diskUsage=uint8_t)
  }
}
