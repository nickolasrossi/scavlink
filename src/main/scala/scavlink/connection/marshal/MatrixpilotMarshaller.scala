// Code generated by sbt-mavgen. Manual edits will be overwritten
package scavlink.connection.marshal

import scavlink.message.{Message, Bundle}
import scavlink.message.matrixpilot._
import scavlink.message.enums._
import akka.util.{ByteIterator, ByteStringBuilder}

object MatrixpilotMarshaller extends BundleMarshaller {
  val bundle = Bundle.matrixpilot

  def magic = Map(150 -> 181, 151 -> 26, 152 -> 101, 153 -> 109, 155 -> 12, 156 -> 218, 157 -> 133, 158 -> 208, 170 -> 150, 171 -> 169, 172 -> 191, 173 -> 121, 174 -> 54, 175 -> 171, 176 -> 142, 177 -> 249, 178 -> 123, 179 -> 7, 180 -> 222, 181 -> 55, 182 -> 154)

  def _marshal(message: Message)(implicit builder: ByteStringBuilder) = message match {
    case FlexifunctionSet(a,b) => _uint8_t(a); _uint8_t(b)
    case FlexifunctionReadReq(a,b,c,d) => _int16_t(c); _int16_t(d); _uint8_t(a); _uint8_t(b)
    case FlexifunctionBufferFunction(a,b,c,d,e,f,g) => _uint16_t(c); _uint16_t(d); _uint16_t(e); _uint16_t(f); _uint8_t(a); _uint8_t(b); _int8_t_(48)(g)
    case FlexifunctionBufferFunctionAck(a,b,c,d) => _uint16_t(c); _uint16_t(d); _uint8_t(a); _uint8_t(b)
    case FlexifunctionDirectory(a,b,c,d,e,f) => _uint8_t(a); _uint8_t(b); _uint8_t(c); _uint8_t(d); _uint8_t(e); _int8_t_(48)(f)
    case FlexifunctionDirectoryAck(a,b,c,d,e,f) => _uint16_t(f); _uint8_t(a); _uint8_t(b); _uint8_t(c); _uint8_t(d); _uint8_t(e)
    case FlexifunctionCommand(a,b,c) => _uint8_t(a); _uint8_t(b); _uint8_t(c)
    case FlexifunctionCommandAck(a,b) => _uint16_t(a); _uint16_t(b)
    case SerialUdbExtraF2A(a,b,c,d,e,f,g,p,q,r,s,t,u,x,aa,ab) => _uint32_t(a); _int32_t(c); _int32_t(d); _int32_t(e); _uint16_t(f); _int16_t_(9)(g); _uint16_t(p); _int16_t(q); _uint16_t(r); _int16_t(s); _uint16_t(t); _int16_t_3(u); _int16_t_3(x); _int16_t(aa); _int16_t(ab); _uint8_t(b)
    case SerialUdbExtraF2B(a,b,l,v,y,z,aa,ad,ag) => _uint32_t(a); _uint32_t(y); _int16_t_(10)(b); _int16_t_(10)(l); _int16_t_3(v); _int16_t(z); _int16_t_3(aa); _int16_t_3(ad); _int16_t(ag)
    case SerialUdbExtraF4(a,b,c,d,e,f,g,h,i,j) => _uint8_t(a); _uint8_t(b); _uint8_t(c); _uint8_t(d); _uint8_t(e); _uint8_t(f); _uint8_t(g); _uint8_t(h); _uint8_t(i); _uint8_t(j)
    case SerialUdbExtraF5(a,b,c,d,e,f) => _float(a); _float(b); _float(c); _float(d); _float(e); _float(f)
    case SerialUdbExtraF6(a,b,c,d,e) => _float(a); _float(b); _float(c); _float(d); _float(e)
    case SerialUdbExtraF7(a,b,c,d,e,f) => _float(a); _float(b); _float(c); _float(d); _float(e); _float(f)
    case SerialUdbExtraF8(a,b,c,d,e,f,g) => _float(a); _float(b); _float(c); _float(d); _float(e); _float(f); _float(g)
    case SerialUdbExtraF13(a,b,c,d) => _int32_t(b); _int32_t(c); _int32_t(d); _int16_t(a)
    case SerialUdbExtraF14(a,b,c,d,e,f,g,h,i,j,k) => _uint32_t(h); _int16_t(f); _int16_t(g); _int16_t(i); _uint8_t(a); _uint8_t(b); _uint8_t(c); _uint8_t(d); _uint8_t(e); _uint8_t(j); _uint8_t(k)
    case SerialUdbExtraF15(a,b) => _uint8_t_(40)(a); _uint8_t_(20)(b)
    case SerialUdbExtraF16(a,b) => _uint8_t_(40)(a); _uint8_t_(70)(b)
    case Altitudes(a,b,c,d,e,f,g) => _uint32_t(a); _int32_t(b); _int32_t(c); _int32_t(d); _int32_t(e); _int32_t(f); _int32_t(g)
    case Airspeeds(a,b,c,d,e,f,g) => _uint32_t(a); _int16_t(b); _int16_t(c); _int16_t(d); _int16_t(e); _int16_t(f); _int16_t(g)
  }

  def _unmarshal(msgId: Int)(implicit iter: ByteIterator) = msgId match {
    case 150 => FlexifunctionSet(targetSystem=uint8_t, targetComponent=uint8_t)
    case 151 => FlexifunctionReadReq(readReqType=int16_t, dataIndex=int16_t, targetSystem=uint8_t, targetComponent=uint8_t)
    case 152 => FlexifunctionBufferFunction(funcIndex=uint16_t, funcCount=uint16_t, dataAddress=uint16_t, dataSize=uint16_t, targetSystem=uint8_t, targetComponent=uint8_t, data=int8_t_(48))
    case 153 => FlexifunctionBufferFunctionAck(funcIndex=uint16_t, result=uint16_t, targetSystem=uint8_t, targetComponent=uint8_t)
    case 155 => FlexifunctionDirectory(targetSystem=uint8_t, targetComponent=uint8_t, directoryType=uint8_t, startIndex=uint8_t, count=uint8_t, directoryData=int8_t_(48))
    case 156 => FlexifunctionDirectoryAck(result=uint16_t, targetSystem=uint8_t, targetComponent=uint8_t, directoryType=uint8_t, startIndex=uint8_t, count=uint8_t)
    case 157 => FlexifunctionCommand(targetSystem=uint8_t, targetComponent=uint8_t, commandType=uint8_t)
    case 158 => FlexifunctionCommandAck(commandType=uint16_t, result=uint16_t)
    case 170 => SerialUdbExtraF2A(sueTime=uint32_t, sueLatitude=int32_t, sueLongitude=int32_t, sueAltitude=int32_t, sueWaypointIndex=uint16_t, sueRmat=int16_t_(9), sueCog=uint16_t, sueSog=int16_t, sueCpuLoad=uint16_t, sueVoltageMilis=int16_t, sueAirSpeed3DIMU=uint16_t, sueEstimatedWind=int16_t_3, sueMagFieldEarth=int16_t_3, sueSvs=int16_t, sueHdop=int16_t, sueStatus=uint8_t)
    case 171 => SerialUdbExtraF2B(sueTime=uint32_t, sueFlags=uint32_t, suePwmInput=int16_t_(10), suePwmOutput=int16_t_(10), sueImuLocationXYZ=int16_t_3, sueOscFails=int16_t, sueImuVelocityXYZ=int16_t_3, sueWaypointGoalXYZ=int16_t_3, sueMemoryStackFree=int16_t)
    case 172 => SerialUdbExtraF4(sueRollStabilizationAilerons=uint8_t, sueRollStabilizationRudder=uint8_t, suePitchStabilization=uint8_t, sueYawStabilizationRudder=uint8_t, sueYawStabilizationAileron=uint8_t, sueAileronNavigation=uint8_t, sueRudderNavigation=uint8_t, sueAltitudeholdStabilized=uint8_t, sueAltitudeholdWaypoint=uint8_t, sueRacingMode=uint8_t)
    case 173 => SerialUdbExtraF5(sueYawkpAileron=float, sueYawkdAileron=float, sueRollkp=float, sueRollkd=float, sueYawStabilizationAileron=float, sueAileronBoost=float)
    case 174 => SerialUdbExtraF6(suePitchgain=float, suePitchkd=float, sueRudderElevMix=float, sueRollElevMix=float, sueElevatorBoost=float)
    case 175 => SerialUdbExtraF7(sueYawkpRudder=float, sueYawkdRudder=float, sueRollkpRudder=float, sueRollkdRudder=float, sueRudderBoost=float, sueRtlPitchDown=float)
    case 176 => SerialUdbExtraF8(sueHeightTargetMax=float, sueHeightTargetMin=float, sueAltHoldThrottleMin=float, sueAltHoldThrottleMax=float, sueAltHoldPitchMin=float, sueAltHoldPitchMax=float, sueAltHoldPitchHigh=float)
    case 177 => SerialUdbExtraF13(sueLatOrigin=int32_t, sueLonOrigin=int32_t, sueAltOrigin=int32_t, sueWeekNo=int16_t)
    case 178 => SerialUdbExtraF14(sueTrapSource=uint32_t, sueRcon=int16_t, sueTrapFlags=int16_t, sueOscFailCount=int16_t, sueWindEstimation=uint8_t, sueGpsType=uint8_t, sueDr=uint8_t, sueBoardType=uint8_t, sueAirframe=uint8_t, sueClockConfig=uint8_t, sueFlightPlanType=uint8_t)
    case 179 => SerialUdbExtraF15(sueIdVehicleModelName=uint8_t_(40), sueIdVehicleRegistration=uint8_t_(20))
    case 180 => SerialUdbExtraF16(sueIdLeadPilot=uint8_t_(40), sueIdDiyDronesUrl=uint8_t_(70))
    case 181 => Altitudes(timeBootMs=uint32_t, altGps=int32_t, altImu=int32_t, altBarometric=int32_t, altOpticalFlow=int32_t, altRangeFinder=int32_t, altExtra=int32_t)
    case 182 => Airspeeds(timeBootMs=uint32_t, airspeedImu=int16_t, airspeedPitot=int16_t, airspeedHotWire=int16_t, airspeedUltrasonic=int16_t, aoa=int16_t, aoy=int16_t)
  }
}
