// Code generated by sbt-mavgen. Manual edits will be overwritten
package scavlink.connection.marshal

import scavlink.message.{Message, Bundle}
import scavlink.message.ardupilotmega._
import scavlink.message.enums._
import akka.util.{ByteIterator, ByteStringBuilder}

object ArdupilotmegaMarshaller extends BundleMarshaller {
  val bundle = Bundle.ardupilotmega

  def magic = Map(150 -> 134, 151 -> 219, 152 -> 208, 153 -> 188, 154 -> 84, 155 -> 22, 156 -> 19, 157 -> 21, 158 -> 134, 160 -> 78, 161 -> 68, 162 -> 189, 163 -> 127, 164 -> 154, 165 -> 21, 166 -> 21, 167 -> 144, 168 -> 1, 169 -> 234, 170 -> 73, 171 -> 181, 172 -> 22, 173 -> 83, 174 -> 167, 175 -> 138, 176 -> 234, 177 -> 240, 178 -> 47, 179 -> 189, 180 -> 52, 181 -> 174)

  def _marshal(message: Message)(implicit builder: ByteStringBuilder) = message match {
    case SensorOffsets(a,b,c,d,e,f,g,h,i,j,k,l) => _float(d); _int32_t(e); _int32_t(f); _float(g); _float(h); _float(i); _float(j); _float(k); _float(l); _int16_t(a); _int16_t(b); _int16_t(c)
    case SetMagOffsets(a,b,c,d,e) => _int16_t(c); _int16_t(d); _int16_t(e); _uint8_t(a); _uint8_t(b)
    case Meminfo(a,b) => _uint16_t(a); _uint16_t(b)
    case ApAdc(a,b,c,d,e,f) => _uint16_t(a); _uint16_t(b); _uint16_t(c); _uint16_t(d); _uint16_t(e); _uint16_t(f)
    case DigicamConfigure(a,b,c,d,e,f,g,h,i,j,k) => _float(k); _uint16_t(d); _uint8_t(a); _uint8_t(b); _uint8_t(c); _uint8_t(e); _uint8_t(f); _uint8_t(g); _uint8_t(h); _uint8_t(i); _uint8_t(j)
    case DigicamControl(a,b,c,d,e,f,g,h,i,j) => _float(j); _uint8_t(a); _uint8_t(b); _uint8_t(c); _uint8_t(d); _int8_t(e); _uint8_t(f); _uint8_t(g); _uint8_t(h); _uint8_t(i)
    case MountConfigure(a,b,c,d,e,f) => _uint8_t(a); _uint8_t(b); _uint8_t(c.id); _uint8_t(d); _uint8_t(e); _uint8_t(f)
    case MountControl(a,b,c,d,e,f) => _int32_t(c); _int32_t(d); _int32_t(e); _uint8_t(a); _uint8_t(b); _uint8_t(f)
    case MountStatus(a,b,c,d,e) => _int32_t(c); _int32_t(d); _int32_t(e); _uint8_t(a); _uint8_t(b)
    case FencePoint(a,b,c,d,e,f) => _float(e); _float(f); _uint8_t(a); _uint8_t(b); _uint8_t(c); _uint8_t(d)
    case FenceFetchPoint(a,b,c) => _uint8_t(a); _uint8_t(b); _uint8_t(c)
    case FenceStatus(a,b,c,d) => _uint32_t(d); _uint16_t(b); _uint8_t(a); _uint8_t(c.id)
    case Ahrs(a,b,c,d,e,f,g) => _float(a); _float(b); _float(c); _float(d); _float(e); _float(f); _float(g)
    case Simstate(a,b,c,d,e,f,g,h,i,j,k) => _float(a); _float(b); _float(c); _float(d); _float(e); _float(f); _float(g); _float(h); _float(i); _int32_t(j); _int32_t(k)
    case Hwstatus(a,b) => _uint16_t(a); _uint8_t(b)
    case Radio(a,b,c,d,e,f,g) => _uint16_t(f); _uint16_t(g); _uint8_t(a); _uint8_t(b); _uint8_t(c); _uint8_t(d); _uint8_t(e)
    case LimitsStatus(a,b,c,d,e,f,g,h,i) => _uint32_t(b); _uint32_t(c); _uint32_t(d); _uint32_t(e); _uint16_t(f); _uint8_t(a.id); _uint8_t(g); _uint8_t(h); _uint8_t(i)
    case Wind(a,b,c) => _float(a); _float(b); _float(c)
    case Data16(a,b,c) => _uint8_t(a); _uint8_t(b); _uint8_t_(16)(c)
    case Data32(a,b,c) => _uint8_t(a); _uint8_t(b); _uint8_t_(32)(c)
    case Data64(a,b,c) => _uint8_t(a); _uint8_t(b); _uint8_t_(64)(c)
    case Data96(a,b,c) => _uint8_t(a); _uint8_t(b); _uint8_t_(96)(c)
    case Rangefinder(a,b) => _float(a); _float(b)
    case AirspeedAutocal(a,b,c,d,e,f,g,h,i,j,k,l) => _float(a); _float(b); _float(c); _float(d); _float(e); _float(f); _float(g); _float(h); _float(i); _float(j); _float(k); _float(l)
    case RallyPoint(a,b,c,d,e,f,g,h,i,j) => _int32_t(e); _int32_t(f); _int16_t(g); _int16_t(h); _uint16_t(i); _uint8_t(a); _uint8_t(b); _uint8_t(c); _uint8_t(d); _uint8_t(j)
    case RallyFetchPoint(a,b,c) => _uint8_t(a); _uint8_t(b); _uint8_t(c)
    case CompassmotStatus(a,b,c,d,e,f) => _float(b); _float(d); _float(e); _float(f); _uint16_t(a); _uint16_t(c)
    case Ahrs2(a,b,c,d,e,f) => _float(a); _float(b); _float(c); _float(d); _int32_t(e); _int32_t(f)
    case CameraStatus(a,b,c,d,e,f,g,h,i) => _uint64_t(a); _float(f); _float(g); _float(h); _float(i); _uint16_t(d); _uint8_t(b); _uint8_t(c); _uint8_t(e)
    case CameraFeedback(a,b,c,d,e,f,g,h,i,j,k,l,m) => _uint64_t(a); _int32_t(e); _int32_t(f); _float(g); _float(h); _float(i); _float(j); _float(k); _float(l); _uint16_t(d); _uint8_t(b); _uint8_t(c); _uint8_t(m)
    case Battery2(a,b) => _uint16_t(a); _int16_t(b)
  }

  def _unmarshal(msgId: Int)(implicit iter: ByteIterator) = msgId match {
    case 150 => SensorOffsets(magDeclination=float, rawPress=int32_t, rawTemp=int32_t, gyroCalX=float, gyroCalY=float, gyroCalZ=float, accelCalX=float, accelCalY=float, accelCalZ=float, magOfsX=int16_t, magOfsY=int16_t, magOfsZ=int16_t)
    case 151 => SetMagOffsets(magOfsX=int16_t, magOfsY=int16_t, magOfsZ=int16_t, targetSystem=uint8_t, targetComponent=uint8_t)
    case 152 => Meminfo(brkval=uint16_t, freemem=uint16_t)
    case 153 => ApAdc(adc1=uint16_t, adc2=uint16_t, adc3=uint16_t, adc4=uint16_t, adc5=uint16_t, adc6=uint16_t)
    case 154 => DigicamConfigure(extraValue=float, shutterSpeed=uint16_t, targetSystem=uint8_t, targetComponent=uint8_t, mode=uint8_t, aperture=uint8_t, iso=uint8_t, exposureType=uint8_t, commandId=uint8_t, engineCutOff=uint8_t, extraParam=uint8_t)
    case 155 => DigicamControl(extraValue=float, targetSystem=uint8_t, targetComponent=uint8_t, session=uint8_t, zoomPos=uint8_t, zoomStep=int8_t, focusLock=uint8_t, shot=uint8_t, commandId=uint8_t, extraParam=uint8_t)
    case 156 => MountConfigure(targetSystem=uint8_t, targetComponent=uint8_t, mountMode=MavMountMode(uint8_t), stabRoll=uint8_t, stabPitch=uint8_t, stabYaw=uint8_t)
    case 157 => MountControl(inputA=int32_t, inputB=int32_t, inputC=int32_t, targetSystem=uint8_t, targetComponent=uint8_t, savePosition=uint8_t)
    case 158 => MountStatus(pointingA=int32_t, pointingB=int32_t, pointingC=int32_t, targetSystem=uint8_t, targetComponent=uint8_t)
    case 160 => FencePoint(lat=float, lng=float, targetSystem=uint8_t, targetComponent=uint8_t, idx=uint8_t, count=uint8_t)
    case 161 => FenceFetchPoint(targetSystem=uint8_t, targetComponent=uint8_t, idx=uint8_t)
    case 162 => FenceStatus(breachTime=uint32_t, breachCount=uint16_t, breachStatus=uint8_t, breachType=FenceBreach(uint8_t))
    case 163 => Ahrs(omegaIx=float, omegaIy=float, omegaIz=float, accelWeight=float, renormVal=float, errorRp=float, errorYaw=float)
    case 164 => Simstate(roll=float, pitch=float, yaw=float, xacc=float, yacc=float, zacc=float, xgyro=float, ygyro=float, zgyro=float, lat=int32_t, lng=int32_t)
    case 165 => Hwstatus(vcc=uint16_t, i2cerr=uint8_t)
    case 166 => Radio(rxerrors=uint16_t, fixed=uint16_t, rssi=uint8_t, remrssi=uint8_t, txbuf=uint8_t, noise=uint8_t, remnoise=uint8_t)
    case 167 => LimitsStatus(lastTrigger=uint32_t, lastAction=uint32_t, lastRecovery=uint32_t, lastClear=uint32_t, breachCount=uint16_t, limitsState=LimitsState(uint8_t), modsEnabled=uint8_t, modsRequired=uint8_t, modsTriggered=uint8_t)
    case 168 => Wind(direction=float, speed=float, speedZ=float)
    case 169 => Data16(`type`=uint8_t, len=uint8_t, data=uint8_t_(16))
    case 170 => Data32(`type`=uint8_t, len=uint8_t, data=uint8_t_(32))
    case 171 => Data64(`type`=uint8_t, len=uint8_t, data=uint8_t_(64))
    case 172 => Data96(`type`=uint8_t, len=uint8_t, data=uint8_t_(96))
    case 173 => Rangefinder(distance=float, voltage=float)
    case 174 => AirspeedAutocal(vx=float, vy=float, vz=float, diffPressure=float, eas2tas=float, ratio=float, stateX=float, stateY=float, stateZ=float, pax=float, pby=float, pcz=float)
    case 175 => RallyPoint(lat=int32_t, lng=int32_t, alt=int16_t, breakAlt=int16_t, landDir=uint16_t, targetSystem=uint8_t, targetComponent=uint8_t, idx=uint8_t, count=uint8_t, flags=uint8_t)
    case 176 => RallyFetchPoint(targetSystem=uint8_t, targetComponent=uint8_t, idx=uint8_t)
    case 177 => CompassmotStatus(current=float, compensationx=float, compensationy=float, compensationz=float, throttle=uint16_t, interference=uint16_t)
    case 178 => Ahrs2(roll=float, pitch=float, yaw=float, altitude=float, lat=int32_t, lng=int32_t)
    case 179 => CameraStatus(timeUsec=uint64_t, p1=float, p2=float, p3=float, p4=float, imgIdx=uint16_t, targetSystem=uint8_t, camIdx=uint8_t, eventId=uint8_t)
    case 180 => CameraFeedback(timeUsec=uint64_t, lat=int32_t, lng=int32_t, altMsl=float, altRel=float, roll=float, pitch=float, yaw=float, focLen=float, imgIdx=uint16_t, targetSystem=uint8_t, camIdx=uint8_t, flags=uint8_t)
    case 181 => Battery2(voltage=uint16_t, currentBattery=int16_t)
  }
}
