<% import scavlink.sbt.mavgen._ %>
<%@ val messages: Seq[Message] %>
<%@ val bundle: String %>
<%@ val pkg: String %>
// Code generated by sbt-mavgen. Manual edits will be overwritten
package ${pkg}

import scavlink.message._
import scavlink.message.enums._
#for (m <- messages)

#if(m.description != "" || m.fields.head.description != "")/**
#if(m.description != "") * ${m.description}
#end
#if(m.fields.head.description != "")#for(f <- m.fields)
 * @param ${f.name} ${f.description}
#end#end
 */
#end
case class ${m.className}(${m.fields.head.name}: ${m.fields.head.stype.dataType} = ${m.fields.head.stype.default}#for(f <- m.fields.tail), ${f.name}: ${f.stype.dataType} = ${f.stype.default}#end)
extends Message #if(m.fields.exists(f => f.name == "targetComponent" && f.stype.dataType == "ComponentId"))with TargetComponent[${m.className}] #elseif(m.fields.exists(f => f.name == "targetSystem" && f.stype.dataType == "SystemId"))with TargetSystem[${m.className}] #end {
#for (f <- m.fields)#if(f.ftype.elem > 4)  require(${f.name}.length <= ${f.ftype.elem})
#end#end
  val _id = ${m.id}
  val _name = "${m.name}"
  val _bundle = Bundle.${m.bundle}
#if(m.fields.exists(f => f.name == "targetSystem" && f.stype.dataType == "SystemId"))  def setTargetSystem(systemId: SystemId): ${m.className} = copy(targetSystem = systemId)
#end #if(m.fields.exists(f => f.name == "targetComponent" && f.stype.dataType == "ComponentId"))  def setTargetComponent(componentId: ComponentId): ${m.className} = copy(targetComponent = componentId)
  def setTarget(systemId: SystemId, componentId: ComponentId): ${m.className} = copy(targetSystem = systemId, targetComponent = componentId)
#end
  override def toString = <%= "\"" + m.name + "\" + " + m.fields.map(f => "\" " + f.plainName + "=\" + " + f.name).mkString(" + ") %>
}
#end
