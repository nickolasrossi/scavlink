<% import scavlink.sbt.mavgen._ %>
<%@ val messages: Seq[Message] %>
<%@ val bundle: String %>
<%@ val pkg: String %>
// Code generated by sbt-mavgen. Manual edits will be overwritten
package ${pkg}

import scavlink.message.{Message, Bundle}
import scavlink.message.${bundle}._
import scavlink.message.enums._
import akka.util.{ByteIterator, ByteStringBuilder}

object ${bundle.capitalize}Marshaller extends BundleMarshaller {
  val bundle = Bundle.${bundle}

  def magic = Map(${ messages.map(m => m.id + " -> " + m.magic).mkString(", ") })

  def _marshal(message: Message)(implicit builder: ByteStringBuilder) = message match {
#for (m <- messages)
    case ${m.className}(${ m.fields.map(_.ord).mkString(",") }) => ${ m.marshalOrder.map(_.marshalMethodCall).mkString("; ") }
#end
  }

  def _unmarshal(msgId: Int)(implicit iter: ByteIterator) = msgId match {
#for (m <- messages)
    case ${m.id} => ${m.className}(${ m.marshalOrder.map(f => f.name + "=" + f.unmarshalMethodCall).mkString(", ") })
#end
  }
}
