<% import scavlink.sbt.mavgen._ %>
<%@ val cmds: Seq[Command] %>
<%@ val pkg: String %>
// Code generated by sbt-mavgen. Manual edits will be overwritten
package ${pkg}

import scavlink.message._
import scavlink.message.enums.MavCmd
#if (!pkg.endsWith("common"))
import scavlink.message.common.CommandLong
#end
import scavlink.coord.Coordinates
import scavlink.coord.Geo
#for (cmd <- cmds)

/**
 * ${cmd.description}
#for (p <- cmd.params)
 * @param ${p.name} ${p.description}
#end
 */
case class ${cmd.name}(targetSystem: SystemId = 0, targetComponent: ComponentId = 0#for (p <- cmd.params), ${p.name}: ${p.ftype} = ${p.default}#end)
extends Command #if (cmd.hasLocation)with Location[${cmd.name}] #end {
  val cmd = MavCmd(${cmd.id})
  val message = CommandLong(targetSystem, targetComponent, cmd#for (p <- cmd.params), ${p.assignment("param")}#end)
#if (cmd.hasLocation)  def setLocation(location: Coordinates) = copy(location = location)
#end
  override def toString = cmd.toString #for (p <- cmd.params)  + " ${p.plainName}=" + ${p.name} #end

}
#if (cmd.hasLocation)
object ${cmd.name} {
  def apply(loc: Coordinates): ${cmd.name} = ${cmd.name}(location = loc)
}
#end
#end
