akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

// http server settings
spray {
  can.server {
    #ssl-encryption = on
  }

  // users recognized for Basic or OAuth2 authentication
  routing.users {
    #admin = "???"
  }
}

//
scavlink {
  // akka dispatcher used for default actor messages
  // see akka documentation for how to partition actors into different dispatchers if desired.
  main-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      core-pool-size-min = 2
      core-pool-size-factor = 2.0
      core-pool-size-max = 5
    }
    throughput = 5
  }

  // akka dispatcher for receiving packets from communication links
  // separated to prevent incoming packets from starving other message traffic.
  receive-dispatcher = {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      core-pool-size-min = 2
      core-pool-size-factor = 2.0
      core-pool-size-max = 5
    }
    throughput = 100
  }

  // automatically establish these connections at startup
  // other connections may be started in the application by sending StartConnection message to ScavlinkSupervisor.
  connections = [
//    {
//      type = serial
//      address = "/dev/tty.usbserial-DN006OQW" # 3DR radio on Mac / Yosemite
//      address = "/dev/ttyUSB0"                # typical on Linux
//      bitrate = 57600
//      opts = 8N1
//      connect-timeout = 10s
//      reconnect-interval = 10s
//    },
//    {
//      type = tcp-client
//      host = "127.0.0.1"
//      port = 5760                             # default SITL port
//      connect-timeout = 3s
//      reconnect-interval = 10s
//    }
  ]

  // configuration for the task service endpoint
  task {
    // expose methods on these classes as APIs on the service
    apis = ["scavlink.link.nav.NavTellAPI.Nav"]

    // settings for the http service
    // for SSL, set spray.can.server.ssl-encryption = on
    // for remote access, set interface = "0.0.0.0"
    service {
      enabled = true
      interface = "127.0.0.1"
      port = 8080
      token-idle-timeout = 1h
    }

    // start these clients to pull tasks from remote instances
    clients = [
//      {
//        enabled = true
//        host = "localhost"
//        port = 9090
//        username = "admin"
//        password = "admin"
//        secure = true
//      }
    ]

    // SSL keystore settings
    ssl {
      key-store = ""
      key-store-password = ""
      key-password = ""
    }
  }

  // UDP packet bridge for an external GCS
  bridge {
    enabled = true
    address = 127.0.0.1
    port = 14550

    // whether to allow the external GCS's packets to flow back through the system
    // if false, the external GCS will only be able to monitor vehicles, not control them.
    allow-receive = true
  }

  heartbeat {
    // MAVLink system id and component id of the library
    // 255,0 is assigned to ground control systems.
    this-system-id = 255
    this-component-id = 0

    // how often to publish heartbeat packet on every active link
    heartbeat-interval = 10s

    // if library doesn't receive a vehicle's heartbeat in this interval,
    // remove the vehicle from the active list
    heartbeat-timeout = 30s
  }

  telemetry {
    // timeout on detection of telemetry after requesting stream (RequestDataStream message)
    request-timeout = 3s

    // number of retries on RequestDataStream message when activating telemetry
    request-retries = 3
  }

  operation {
    // whenever an operation sends a packet and doesn't receive the expected response, use this timeout before retrying
    // (see VehicleOpActor.MessageRetry trait)
    message-timeout = 1s

    // number of times to retry sending a packet before failing the operation
    message-retries = 3

    // whenever an operation is expecting telemetry, fail operation if it isn't received after this timeout
    telemetry-timeout = 10s
  }

  conversation {
    // for Conversation actor, use this timeout before retrying a message send
    request-timeout = 8s

    // for Conversation actor, retry a message send this many times
    request-retries = 5
  }

  vehicle {
    // timeout for ask-based vehicle APIs.
    // you shouldn't be relying on ask APIs for any serious work, however
    api-timeout = 10m

    // how often to broadcast channel override message (e.g. for maintaining a set throttle)
    channel-override-interval = 1s

    // whether to autoload parameters from a newly detected vehicle
    autoload-parameters = false

    // whether to auto-retrieve the mission from a newly detected vehicle
    autoload-mission = true
  }

  // standard MAVLink flight logs
  log {
    enabled = true
    path = "log"
  }

  // Geofence configuration involves three steps:
  fence {
    // first, define fences and give them names
//    define {
//      SunnyvaleBaylands {
//        corners = [37.413647, -121.995491, 37.411650, -121.993480, 37.411857, -121.997084]
//        upper-altitude = 20
//      }
//
//      ArastraderoPark {
//        wkt = "POLYGON ((-122.179919 37.388709, -122.176202 37.389433, -122.176035 37.388206, -122.178787 37.387643, -122.179919 37.388709))"
//        upper-altitude = 20
//      }
//
//      SanJoseAirport {
//        circle {
//          lat = 37.363742
//          lon = -121.930825
//          radius = 8000
//        }
//        lower-altitude = 100
//      }
//
//      FlyingFields {
//        union = [ "SunnyvaleBaylands", "ArastraderoPark" ]
//      }
//    }

    // then, bind fences to vehicles by type, name, or name prefix, along with an enforcement mode
//    bind = [
//      {fence = SunnyvaleBaylands, mode = Report, vehicle-types = [air, ground]},
//      {fence = ArastraderoPark, mode = Report, vehicle-type = air},
//      {fence = FlyingFields, mode = StayIn, vehicle-type = air}
//      {fence = SanJoseAirport, mode = StayOut, vehicle-type = air},
//    ]

    // finally, specify what to do when a fence is violated. See FenceBreachAction class
    on-breach = LastSafeLocation
  }
}
